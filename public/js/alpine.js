/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./node_modules/@alpinejs/mask/dist/module.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/@alpinejs/mask/dist/module.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ module_default),\n/* harmony export */   \"stripDown\": () => (/* binding */ stripDown)\n/* harmony export */ });\n// packages/mask/src/index.js\r\nfunction src_default(Alpine) {\r\n  Alpine.directive(\"mask\", (el, { value, expression }, { effect, evaluateLater }) => {\r\n    let templateFn = () => expression;\r\n    let lastInputValue = \"\";\r\n    queueMicrotask(() => {\r\n      if ([\"function\", \"dynamic\"].includes(value)) {\r\n        let evaluator = evaluateLater(expression);\r\n        effect(() => {\r\n          templateFn = (input) => {\r\n            let result;\r\n            Alpine.dontAutoEvaluateFunctions(() => {\r\n              evaluator((value2) => {\r\n                result = typeof value2 === \"function\" ? value2(input) : value2;\r\n              }, { scope: {\r\n                // These are \"magics\" we'll make available to the x-mask:function:\r\n                \"$input\": input,\r\n                \"$money\": formatMoney.bind({ el })\r\n              } });\r\n            });\r\n            return result;\r\n          };\r\n          processInputValue(el, false);\r\n        });\r\n      } else {\r\n        processInputValue(el, false);\r\n      }\r\n      if (el._x_model)\r\n        el._x_model.set(el.value);\r\n    });\r\n    el.addEventListener(\"input\", () => processInputValue(el));\r\n    el.addEventListener(\"blur\", () => processInputValue(el, false));\r\n    function processInputValue(el2, shouldRestoreCursor = true) {\r\n      let input = el2.value;\r\n      let template = templateFn(input);\r\n      if (!template || template === \"false\")\r\n        return false;\r\n      if (lastInputValue.length - el2.value.length === 1) {\r\n        return lastInputValue = el2.value;\r\n      }\r\n      let setInput = () => {\r\n        lastInputValue = el2.value = formatInput(input, template);\r\n      };\r\n      if (shouldRestoreCursor) {\r\n        restoreCursorPosition(el2, template, () => {\r\n          setInput();\r\n        });\r\n      } else {\r\n        setInput();\r\n      }\r\n    }\r\n    function formatInput(input, template) {\r\n      if (input === \"\")\r\n        return \"\";\r\n      let strippedDownInput = stripDown(template, input);\r\n      let rebuiltInput = buildUp(template, strippedDownInput);\r\n      return rebuiltInput;\r\n    }\r\n  }).before(\"model\");\r\n}\r\nfunction restoreCursorPosition(el, template, callback) {\r\n  let cursorPosition = el.selectionStart;\r\n  let unformattedValue = el.value;\r\n  callback();\r\n  let beforeLeftOfCursorBeforeFormatting = unformattedValue.slice(0, cursorPosition);\r\n  let newPosition = buildUp(\r\n    template,\r\n    stripDown(\r\n      template,\r\n      beforeLeftOfCursorBeforeFormatting\r\n    )\r\n  ).length;\r\n  el.setSelectionRange(newPosition, newPosition);\r\n}\r\nfunction stripDown(template, input) {\r\n  let inputToBeStripped = input;\r\n  let output = \"\";\r\n  let regexes = {\r\n    \"9\": /[0-9]/,\r\n    \"a\": /[a-zA-Z]/,\r\n    \"*\": /[a-zA-Z0-9]/\r\n  };\r\n  let wildcardTemplate = \"\";\r\n  for (let i = 0; i < template.length; i++) {\r\n    if ([\"9\", \"a\", \"*\"].includes(template[i])) {\r\n      wildcardTemplate += template[i];\r\n      continue;\r\n    }\r\n    for (let j = 0; j < inputToBeStripped.length; j++) {\r\n      if (inputToBeStripped[j] === template[i]) {\r\n        inputToBeStripped = inputToBeStripped.slice(0, j) + inputToBeStripped.slice(j + 1);\r\n        break;\r\n      }\r\n    }\r\n  }\r\n  for (let i = 0; i < wildcardTemplate.length; i++) {\r\n    let found = false;\r\n    for (let j = 0; j < inputToBeStripped.length; j++) {\r\n      if (regexes[wildcardTemplate[i]].test(inputToBeStripped[j])) {\r\n        output += inputToBeStripped[j];\r\n        inputToBeStripped = inputToBeStripped.slice(0, j) + inputToBeStripped.slice(j + 1);\r\n        found = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!found)\r\n      break;\r\n  }\r\n  return output;\r\n}\r\nfunction buildUp(template, input) {\r\n  let clean = Array.from(input);\r\n  let output = \"\";\r\n  for (let i = 0; i < template.length; i++) {\r\n    if (![\"9\", \"a\", \"*\"].includes(template[i])) {\r\n      output += template[i];\r\n      continue;\r\n    }\r\n    if (clean.length === 0)\r\n      break;\r\n    output += clean.shift();\r\n  }\r\n  return output;\r\n}\r\nfunction formatMoney(input, delimiter = \".\", thousands, precision = 2) {\r\n  if (input === \"-\")\r\n    return \"-\";\r\n  if (/^\\D+$/.test(input))\r\n    return \"9\";\r\n  thousands = thousands ?? (delimiter === \",\" ? \".\" : \",\");\r\n  let addThousands = (input2, thousands2) => {\r\n    let output = \"\";\r\n    let counter = 0;\r\n    for (let i = input2.length - 1; i >= 0; i--) {\r\n      if (input2[i] === thousands2)\r\n        continue;\r\n      if (counter === 3) {\r\n        output = input2[i] + thousands2 + output;\r\n        counter = 0;\r\n      } else {\r\n        output = input2[i] + output;\r\n      }\r\n      counter++;\r\n    }\r\n    return output;\r\n  };\r\n  let minus = input.startsWith(\"-\") ? \"-\" : \"\";\r\n  let strippedInput = input.replaceAll(new RegExp(`[^0-9\\\\${delimiter}]`, \"g\"), \"\");\r\n  let template = Array.from({ length: strippedInput.split(delimiter)[0].length }).fill(\"9\").join(\"\");\r\n  template = `${minus}${addThousands(template, thousands)}`;\r\n  if (precision > 0 && input.includes(delimiter))\r\n    template += `${delimiter}` + \"9\".repeat(precision);\r\n  queueMicrotask(() => {\r\n    if (this.el.value.endsWith(delimiter))\r\n      return;\r\n    if (this.el.value[this.el.selectionStart - 1] === delimiter) {\r\n      this.el.setSelectionRange(this.el.selectionStart - 1, this.el.selectionStart - 1);\r\n    }\r\n  });\r\n  return template;\r\n}\r\n\r\n// packages/mask/builds/module.js\r\nvar module_default = src_default;\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@alpinejs/mask/dist/module.esm.js\n");

/***/ }),

/***/ "./node_modules/alpinejs/dist/module.esm.js":
/*!**************************************************!*\
  !*** ./node_modules/alpinejs/dist/module.esm.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ module_default)\n/* harmony export */ });\n// packages/alpinejs/src/scheduler.js\r\nvar flushPending = false;\r\nvar flushing = false;\r\nvar queue = [];\r\nvar lastFlushedIndex = -1;\r\nfunction scheduler(callback) {\r\n  queueJob(callback);\r\n}\r\nfunction queueJob(job) {\r\n  if (!queue.includes(job))\r\n    queue.push(job);\r\n  queueFlush();\r\n}\r\nfunction dequeueJob(job) {\r\n  let index = queue.indexOf(job);\r\n  if (index !== -1 && index > lastFlushedIndex)\r\n    queue.splice(index, 1);\r\n}\r\nfunction queueFlush() {\r\n  if (!flushing && !flushPending) {\r\n    flushPending = true;\r\n    queueMicrotask(flushJobs);\r\n  }\r\n}\r\nfunction flushJobs() {\r\n  flushPending = false;\r\n  flushing = true;\r\n  for (let i = 0; i < queue.length; i++) {\r\n    queue[i]();\r\n    lastFlushedIndex = i;\r\n  }\r\n  queue.length = 0;\r\n  lastFlushedIndex = -1;\r\n  flushing = false;\r\n}\r\n\r\n// packages/alpinejs/src/reactivity.js\r\nvar reactive;\r\nvar effect;\r\nvar release;\r\nvar raw;\r\nvar shouldSchedule = true;\r\nfunction disableEffectScheduling(callback) {\r\n  shouldSchedule = false;\r\n  callback();\r\n  shouldSchedule = true;\r\n}\r\nfunction setReactivityEngine(engine) {\r\n  reactive = engine.reactive;\r\n  release = engine.release;\r\n  effect = (callback) => engine.effect(callback, { scheduler: (task) => {\r\n    if (shouldSchedule) {\r\n      scheduler(task);\r\n    } else {\r\n      task();\r\n    }\r\n  } });\r\n  raw = engine.raw;\r\n}\r\nfunction overrideEffect(override) {\r\n  effect = override;\r\n}\r\nfunction elementBoundEffect(el) {\r\n  let cleanup2 = () => {\r\n  };\r\n  let wrappedEffect = (callback) => {\r\n    let effectReference = effect(callback);\r\n    if (!el._x_effects) {\r\n      el._x_effects = /* @__PURE__ */ new Set();\r\n      el._x_runEffects = () => {\r\n        el._x_effects.forEach((i) => i());\r\n      };\r\n    }\r\n    el._x_effects.add(effectReference);\r\n    cleanup2 = () => {\r\n      if (effectReference === void 0)\r\n        return;\r\n      el._x_effects.delete(effectReference);\r\n      release(effectReference);\r\n    };\r\n    return effectReference;\r\n  };\r\n  return [wrappedEffect, () => {\r\n    cleanup2();\r\n  }];\r\n}\r\n\r\n// packages/alpinejs/src/mutation.js\r\nvar onAttributeAddeds = [];\r\nvar onElRemoveds = [];\r\nvar onElAddeds = [];\r\nfunction onElAdded(callback) {\r\n  onElAddeds.push(callback);\r\n}\r\nfunction onElRemoved(el, callback) {\r\n  if (typeof callback === \"function\") {\r\n    if (!el._x_cleanups)\r\n      el._x_cleanups = [];\r\n    el._x_cleanups.push(callback);\r\n  } else {\r\n    callback = el;\r\n    onElRemoveds.push(callback);\r\n  }\r\n}\r\nfunction onAttributesAdded(callback) {\r\n  onAttributeAddeds.push(callback);\r\n}\r\nfunction onAttributeRemoved(el, name, callback) {\r\n  if (!el._x_attributeCleanups)\r\n    el._x_attributeCleanups = {};\r\n  if (!el._x_attributeCleanups[name])\r\n    el._x_attributeCleanups[name] = [];\r\n  el._x_attributeCleanups[name].push(callback);\r\n}\r\nfunction cleanupAttributes(el, names) {\r\n  if (!el._x_attributeCleanups)\r\n    return;\r\n  Object.entries(el._x_attributeCleanups).forEach(([name, value]) => {\r\n    if (names === void 0 || names.includes(name)) {\r\n      value.forEach((i) => i());\r\n      delete el._x_attributeCleanups[name];\r\n    }\r\n  });\r\n}\r\nvar observer = new MutationObserver(onMutate);\r\nvar currentlyObserving = false;\r\nfunction startObservingMutations() {\r\n  observer.observe(document, { subtree: true, childList: true, attributes: true, attributeOldValue: true });\r\n  currentlyObserving = true;\r\n}\r\nfunction stopObservingMutations() {\r\n  flushObserver();\r\n  observer.disconnect();\r\n  currentlyObserving = false;\r\n}\r\nvar recordQueue = [];\r\nvar willProcessRecordQueue = false;\r\nfunction flushObserver() {\r\n  recordQueue = recordQueue.concat(observer.takeRecords());\r\n  if (recordQueue.length && !willProcessRecordQueue) {\r\n    willProcessRecordQueue = true;\r\n    queueMicrotask(() => {\r\n      processRecordQueue();\r\n      willProcessRecordQueue = false;\r\n    });\r\n  }\r\n}\r\nfunction processRecordQueue() {\r\n  onMutate(recordQueue);\r\n  recordQueue.length = 0;\r\n}\r\nfunction mutateDom(callback) {\r\n  if (!currentlyObserving)\r\n    return callback();\r\n  stopObservingMutations();\r\n  let result = callback();\r\n  startObservingMutations();\r\n  return result;\r\n}\r\nvar isCollecting = false;\r\nvar deferredMutations = [];\r\nfunction deferMutations() {\r\n  isCollecting = true;\r\n}\r\nfunction flushAndStopDeferringMutations() {\r\n  isCollecting = false;\r\n  onMutate(deferredMutations);\r\n  deferredMutations = [];\r\n}\r\nfunction onMutate(mutations) {\r\n  if (isCollecting) {\r\n    deferredMutations = deferredMutations.concat(mutations);\r\n    return;\r\n  }\r\n  let addedNodes = [];\r\n  let removedNodes = [];\r\n  let addedAttributes = /* @__PURE__ */ new Map();\r\n  let removedAttributes = /* @__PURE__ */ new Map();\r\n  for (let i = 0; i < mutations.length; i++) {\r\n    if (mutations[i].target._x_ignoreMutationObserver)\r\n      continue;\r\n    if (mutations[i].type === \"childList\") {\r\n      mutations[i].addedNodes.forEach((node) => node.nodeType === 1 && addedNodes.push(node));\r\n      mutations[i].removedNodes.forEach((node) => node.nodeType === 1 && removedNodes.push(node));\r\n    }\r\n    if (mutations[i].type === \"attributes\") {\r\n      let el = mutations[i].target;\r\n      let name = mutations[i].attributeName;\r\n      let oldValue = mutations[i].oldValue;\r\n      let add2 = () => {\r\n        if (!addedAttributes.has(el))\r\n          addedAttributes.set(el, []);\r\n        addedAttributes.get(el).push({ name, value: el.getAttribute(name) });\r\n      };\r\n      let remove = () => {\r\n        if (!removedAttributes.has(el))\r\n          removedAttributes.set(el, []);\r\n        removedAttributes.get(el).push(name);\r\n      };\r\n      if (el.hasAttribute(name) && oldValue === null) {\r\n        add2();\r\n      } else if (el.hasAttribute(name)) {\r\n        remove();\r\n        add2();\r\n      } else {\r\n        remove();\r\n      }\r\n    }\r\n  }\r\n  removedAttributes.forEach((attrs, el) => {\r\n    cleanupAttributes(el, attrs);\r\n  });\r\n  addedAttributes.forEach((attrs, el) => {\r\n    onAttributeAddeds.forEach((i) => i(el, attrs));\r\n  });\r\n  for (let node of removedNodes) {\r\n    if (addedNodes.includes(node))\r\n      continue;\r\n    onElRemoveds.forEach((i) => i(node));\r\n    if (node._x_cleanups) {\r\n      while (node._x_cleanups.length)\r\n        node._x_cleanups.pop()();\r\n    }\r\n  }\r\n  addedNodes.forEach((node) => {\r\n    node._x_ignoreSelf = true;\r\n    node._x_ignore = true;\r\n  });\r\n  for (let node of addedNodes) {\r\n    if (removedNodes.includes(node))\r\n      continue;\r\n    if (!node.isConnected)\r\n      continue;\r\n    delete node._x_ignoreSelf;\r\n    delete node._x_ignore;\r\n    onElAddeds.forEach((i) => i(node));\r\n    node._x_ignore = true;\r\n    node._x_ignoreSelf = true;\r\n  }\r\n  addedNodes.forEach((node) => {\r\n    delete node._x_ignoreSelf;\r\n    delete node._x_ignore;\r\n  });\r\n  addedNodes = null;\r\n  removedNodes = null;\r\n  addedAttributes = null;\r\n  removedAttributes = null;\r\n}\r\n\r\n// packages/alpinejs/src/scope.js\r\nfunction scope(node) {\r\n  return mergeProxies(closestDataStack(node));\r\n}\r\nfunction addScopeToNode(node, data2, referenceNode) {\r\n  node._x_dataStack = [data2, ...closestDataStack(referenceNode || node)];\r\n  return () => {\r\n    node._x_dataStack = node._x_dataStack.filter((i) => i !== data2);\r\n  };\r\n}\r\nfunction refreshScope(element, scope2) {\r\n  let existingScope = element._x_dataStack[0];\r\n  Object.entries(scope2).forEach(([key, value]) => {\r\n    existingScope[key] = value;\r\n  });\r\n}\r\nfunction closestDataStack(node) {\r\n  if (node._x_dataStack)\r\n    return node._x_dataStack;\r\n  if (typeof ShadowRoot === \"function\" && node instanceof ShadowRoot) {\r\n    return closestDataStack(node.host);\r\n  }\r\n  if (!node.parentNode) {\r\n    return [];\r\n  }\r\n  return closestDataStack(node.parentNode);\r\n}\r\nfunction mergeProxies(objects) {\r\n  let thisProxy = new Proxy({}, {\r\n    ownKeys: () => {\r\n      return Array.from(new Set(objects.flatMap((i) => Object.keys(i))));\r\n    },\r\n    has: (target, name) => {\r\n      return objects.some((obj) => obj.hasOwnProperty(name));\r\n    },\r\n    get: (target, name) => {\r\n      return (objects.find((obj) => {\r\n        if (obj.hasOwnProperty(name)) {\r\n          let descriptor = Object.getOwnPropertyDescriptor(obj, name);\r\n          if (descriptor.get && descriptor.get._x_alreadyBound || descriptor.set && descriptor.set._x_alreadyBound) {\r\n            return true;\r\n          }\r\n          if ((descriptor.get || descriptor.set) && descriptor.enumerable) {\r\n            let getter = descriptor.get;\r\n            let setter = descriptor.set;\r\n            let property = descriptor;\r\n            getter = getter && getter.bind(thisProxy);\r\n            setter = setter && setter.bind(thisProxy);\r\n            if (getter)\r\n              getter._x_alreadyBound = true;\r\n            if (setter)\r\n              setter._x_alreadyBound = true;\r\n            Object.defineProperty(obj, name, {\r\n              ...property,\r\n              get: getter,\r\n              set: setter\r\n            });\r\n          }\r\n          return true;\r\n        }\r\n        return false;\r\n      }) || {})[name];\r\n    },\r\n    set: (target, name, value) => {\r\n      let closestObjectWithKey = objects.find((obj) => obj.hasOwnProperty(name));\r\n      if (closestObjectWithKey) {\r\n        closestObjectWithKey[name] = value;\r\n      } else {\r\n        objects[objects.length - 1][name] = value;\r\n      }\r\n      return true;\r\n    }\r\n  });\r\n  return thisProxy;\r\n}\r\n\r\n// packages/alpinejs/src/interceptor.js\r\nfunction initInterceptors(data2) {\r\n  let isObject2 = (val) => typeof val === \"object\" && !Array.isArray(val) && val !== null;\r\n  let recurse = (obj, basePath = \"\") => {\r\n    Object.entries(Object.getOwnPropertyDescriptors(obj)).forEach(([key, { value, enumerable }]) => {\r\n      if (enumerable === false || value === void 0)\r\n        return;\r\n      let path = basePath === \"\" ? key : `${basePath}.${key}`;\r\n      if (typeof value === \"object\" && value !== null && value._x_interceptor) {\r\n        obj[key] = value.initialize(data2, path, key);\r\n      } else {\r\n        if (isObject2(value) && value !== obj && !(value instanceof Element)) {\r\n          recurse(value, path);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  return recurse(data2);\r\n}\r\nfunction interceptor(callback, mutateObj = () => {\r\n}) {\r\n  let obj = {\r\n    initialValue: void 0,\r\n    _x_interceptor: true,\r\n    initialize(data2, path, key) {\r\n      return callback(this.initialValue, () => get(data2, path), (value) => set(data2, path, value), path, key);\r\n    }\r\n  };\r\n  mutateObj(obj);\r\n  return (initialValue) => {\r\n    if (typeof initialValue === \"object\" && initialValue !== null && initialValue._x_interceptor) {\r\n      let initialize = obj.initialize.bind(obj);\r\n      obj.initialize = (data2, path, key) => {\r\n        let innerValue = initialValue.initialize(data2, path, key);\r\n        obj.initialValue = innerValue;\r\n        return initialize(data2, path, key);\r\n      };\r\n    } else {\r\n      obj.initialValue = initialValue;\r\n    }\r\n    return obj;\r\n  };\r\n}\r\nfunction get(obj, path) {\r\n  return path.split(\".\").reduce((carry, segment) => carry[segment], obj);\r\n}\r\nfunction set(obj, path, value) {\r\n  if (typeof path === \"string\")\r\n    path = path.split(\".\");\r\n  if (path.length === 1)\r\n    obj[path[0]] = value;\r\n  else if (path.length === 0)\r\n    throw error;\r\n  else {\r\n    if (obj[path[0]])\r\n      return set(obj[path[0]], path.slice(1), value);\r\n    else {\r\n      obj[path[0]] = {};\r\n      return set(obj[path[0]], path.slice(1), value);\r\n    }\r\n  }\r\n}\r\n\r\n// packages/alpinejs/src/magics.js\r\nvar magics = {};\r\nfunction magic(name, callback) {\r\n  magics[name] = callback;\r\n}\r\nfunction injectMagics(obj, el) {\r\n  Object.entries(magics).forEach(([name, callback]) => {\r\n    Object.defineProperty(obj, `$${name}`, {\r\n      get() {\r\n        let [utilities, cleanup2] = getElementBoundUtilities(el);\r\n        utilities = { interceptor, ...utilities };\r\n        onElRemoved(el, cleanup2);\r\n        return callback(el, utilities);\r\n      },\r\n      enumerable: false\r\n    });\r\n  });\r\n  return obj;\r\n}\r\n\r\n// packages/alpinejs/src/utils/error.js\r\nfunction tryCatch(el, expression, callback, ...args) {\r\n  try {\r\n    return callback(...args);\r\n  } catch (e) {\r\n    handleError(e, el, expression);\r\n  }\r\n}\r\nfunction handleError(error2, el, expression = void 0) {\r\n  Object.assign(error2, { el, expression });\r\n  console.warn(`Alpine Expression Error: ${error2.message}\r\n\r\n${expression ? 'Expression: \"' + expression + '\"\\n\\n' : \"\"}`, el);\r\n  setTimeout(() => {\r\n    throw error2;\r\n  }, 0);\r\n}\r\n\r\n// packages/alpinejs/src/evaluator.js\r\nvar shouldAutoEvaluateFunctions = true;\r\nfunction dontAutoEvaluateFunctions(callback) {\r\n  let cache = shouldAutoEvaluateFunctions;\r\n  shouldAutoEvaluateFunctions = false;\r\n  callback();\r\n  shouldAutoEvaluateFunctions = cache;\r\n}\r\nfunction evaluate(el, expression, extras = {}) {\r\n  let result;\r\n  evaluateLater(el, expression)((value) => result = value, extras);\r\n  return result;\r\n}\r\nfunction evaluateLater(...args) {\r\n  return theEvaluatorFunction(...args);\r\n}\r\nvar theEvaluatorFunction = normalEvaluator;\r\nfunction setEvaluator(newEvaluator) {\r\n  theEvaluatorFunction = newEvaluator;\r\n}\r\nfunction normalEvaluator(el, expression) {\r\n  let overriddenMagics = {};\r\n  injectMagics(overriddenMagics, el);\r\n  let dataStack = [overriddenMagics, ...closestDataStack(el)];\r\n  let evaluator = typeof expression === \"function\" ? generateEvaluatorFromFunction(dataStack, expression) : generateEvaluatorFromString(dataStack, expression, el);\r\n  return tryCatch.bind(null, el, expression, evaluator);\r\n}\r\nfunction generateEvaluatorFromFunction(dataStack, func) {\r\n  return (receiver = () => {\r\n  }, { scope: scope2 = {}, params = [] } = {}) => {\r\n    let result = func.apply(mergeProxies([scope2, ...dataStack]), params);\r\n    runIfTypeOfFunction(receiver, result);\r\n  };\r\n}\r\nvar evaluatorMemo = {};\r\nfunction generateFunctionFromString(expression, el) {\r\n  if (evaluatorMemo[expression]) {\r\n    return evaluatorMemo[expression];\r\n  }\r\n  let AsyncFunction = Object.getPrototypeOf(async function() {\r\n  }).constructor;\r\n  let rightSideSafeExpression = /^[\\n\\s]*if.*\\(.*\\)/.test(expression) || /^(let|const)\\s/.test(expression) ? `(async()=>{ ${expression} })()` : expression;\r\n  const safeAsyncFunction = () => {\r\n    try {\r\n      return new AsyncFunction([\"__self\", \"scope\"], `with (scope) { __self.result = ${rightSideSafeExpression} }; __self.finished = true; return __self.result;`);\r\n    } catch (error2) {\r\n      handleError(error2, el, expression);\r\n      return Promise.resolve();\r\n    }\r\n  };\r\n  let func = safeAsyncFunction();\r\n  evaluatorMemo[expression] = func;\r\n  return func;\r\n}\r\nfunction generateEvaluatorFromString(dataStack, expression, el) {\r\n  let func = generateFunctionFromString(expression, el);\r\n  return (receiver = () => {\r\n  }, { scope: scope2 = {}, params = [] } = {}) => {\r\n    func.result = void 0;\r\n    func.finished = false;\r\n    let completeScope = mergeProxies([scope2, ...dataStack]);\r\n    if (typeof func === \"function\") {\r\n      let promise = func(func, completeScope).catch((error2) => handleError(error2, el, expression));\r\n      if (func.finished) {\r\n        runIfTypeOfFunction(receiver, func.result, completeScope, params, el);\r\n        func.result = void 0;\r\n      } else {\r\n        promise.then((result) => {\r\n          runIfTypeOfFunction(receiver, result, completeScope, params, el);\r\n        }).catch((error2) => handleError(error2, el, expression)).finally(() => func.result = void 0);\r\n      }\r\n    }\r\n  };\r\n}\r\nfunction runIfTypeOfFunction(receiver, value, scope2, params, el) {\r\n  if (shouldAutoEvaluateFunctions && typeof value === \"function\") {\r\n    let result = value.apply(scope2, params);\r\n    if (result instanceof Promise) {\r\n      result.then((i) => runIfTypeOfFunction(receiver, i, scope2, params)).catch((error2) => handleError(error2, el, value));\r\n    } else {\r\n      receiver(result);\r\n    }\r\n  } else if (typeof value === \"object\" && value instanceof Promise) {\r\n    value.then((i) => receiver(i));\r\n  } else {\r\n    receiver(value);\r\n  }\r\n}\r\n\r\n// packages/alpinejs/src/directives.js\r\nvar prefixAsString = \"x-\";\r\nfunction prefix(subject = \"\") {\r\n  return prefixAsString + subject;\r\n}\r\nfunction setPrefix(newPrefix) {\r\n  prefixAsString = newPrefix;\r\n}\r\nvar directiveHandlers = {};\r\nfunction directive(name, callback) {\r\n  directiveHandlers[name] = callback;\r\n  return {\r\n    before(directive2) {\r\n      if (!directiveHandlers[directive2]) {\r\n        console.warn(\r\n          \"Cannot find directive `${directive}`. `${name}` will use the default order of execution\"\r\n        );\r\n        return;\r\n      }\r\n      const pos = directiveOrder.indexOf(directive2);\r\n      directiveOrder.splice(pos >= 0 ? pos : directiveOrder.indexOf(\"DEFAULT\"), 0, name);\r\n    }\r\n  };\r\n}\r\nfunction directives(el, attributes, originalAttributeOverride) {\r\n  attributes = Array.from(attributes);\r\n  if (el._x_virtualDirectives) {\r\n    let vAttributes = Object.entries(el._x_virtualDirectives).map(([name, value]) => ({ name, value }));\r\n    let staticAttributes = attributesOnly(vAttributes);\r\n    vAttributes = vAttributes.map((attribute) => {\r\n      if (staticAttributes.find((attr) => attr.name === attribute.name)) {\r\n        return {\r\n          name: `x-bind:${attribute.name}`,\r\n          value: `\"${attribute.value}\"`\r\n        };\r\n      }\r\n      return attribute;\r\n    });\r\n    attributes = attributes.concat(vAttributes);\r\n  }\r\n  let transformedAttributeMap = {};\r\n  let directives2 = attributes.map(toTransformedAttributes((newName, oldName) => transformedAttributeMap[newName] = oldName)).filter(outNonAlpineAttributes).map(toParsedDirectives(transformedAttributeMap, originalAttributeOverride)).sort(byPriority);\r\n  return directives2.map((directive2) => {\r\n    return getDirectiveHandler(el, directive2);\r\n  });\r\n}\r\nfunction attributesOnly(attributes) {\r\n  return Array.from(attributes).map(toTransformedAttributes()).filter((attr) => !outNonAlpineAttributes(attr));\r\n}\r\nvar isDeferringHandlers = false;\r\nvar directiveHandlerStacks = /* @__PURE__ */ new Map();\r\nvar currentHandlerStackKey = Symbol();\r\nfunction deferHandlingDirectives(callback) {\r\n  isDeferringHandlers = true;\r\n  let key = Symbol();\r\n  currentHandlerStackKey = key;\r\n  directiveHandlerStacks.set(key, []);\r\n  let flushHandlers = () => {\r\n    while (directiveHandlerStacks.get(key).length)\r\n      directiveHandlerStacks.get(key).shift()();\r\n    directiveHandlerStacks.delete(key);\r\n  };\r\n  let stopDeferring = () => {\r\n    isDeferringHandlers = false;\r\n    flushHandlers();\r\n  };\r\n  callback(flushHandlers);\r\n  stopDeferring();\r\n}\r\nfunction getElementBoundUtilities(el) {\r\n  let cleanups = [];\r\n  let cleanup2 = (callback) => cleanups.push(callback);\r\n  let [effect3, cleanupEffect] = elementBoundEffect(el);\r\n  cleanups.push(cleanupEffect);\r\n  let utilities = {\r\n    Alpine: alpine_default,\r\n    effect: effect3,\r\n    cleanup: cleanup2,\r\n    evaluateLater: evaluateLater.bind(evaluateLater, el),\r\n    evaluate: evaluate.bind(evaluate, el)\r\n  };\r\n  let doCleanup = () => cleanups.forEach((i) => i());\r\n  return [utilities, doCleanup];\r\n}\r\nfunction getDirectiveHandler(el, directive2) {\r\n  let noop = () => {\r\n  };\r\n  let handler3 = directiveHandlers[directive2.type] || noop;\r\n  let [utilities, cleanup2] = getElementBoundUtilities(el);\r\n  onAttributeRemoved(el, directive2.original, cleanup2);\r\n  let fullHandler = () => {\r\n    if (el._x_ignore || el._x_ignoreSelf)\r\n      return;\r\n    handler3.inline && handler3.inline(el, directive2, utilities);\r\n    handler3 = handler3.bind(handler3, el, directive2, utilities);\r\n    isDeferringHandlers ? directiveHandlerStacks.get(currentHandlerStackKey).push(handler3) : handler3();\r\n  };\r\n  fullHandler.runCleanups = cleanup2;\r\n  return fullHandler;\r\n}\r\nvar startingWith = (subject, replacement) => ({ name, value }) => {\r\n  if (name.startsWith(subject))\r\n    name = name.replace(subject, replacement);\r\n  return { name, value };\r\n};\r\nvar into = (i) => i;\r\nfunction toTransformedAttributes(callback = () => {\r\n}) {\r\n  return ({ name, value }) => {\r\n    let { name: newName, value: newValue } = attributeTransformers.reduce((carry, transform) => {\r\n      return transform(carry);\r\n    }, { name, value });\r\n    if (newName !== name)\r\n      callback(newName, name);\r\n    return { name: newName, value: newValue };\r\n  };\r\n}\r\nvar attributeTransformers = [];\r\nfunction mapAttributes(callback) {\r\n  attributeTransformers.push(callback);\r\n}\r\nfunction outNonAlpineAttributes({ name }) {\r\n  return alpineAttributeRegex().test(name);\r\n}\r\nvar alpineAttributeRegex = () => new RegExp(`^${prefixAsString}([^:^.]+)\\\\b`);\r\nfunction toParsedDirectives(transformedAttributeMap, originalAttributeOverride) {\r\n  return ({ name, value }) => {\r\n    let typeMatch = name.match(alpineAttributeRegex());\r\n    let valueMatch = name.match(/:([a-zA-Z0-9\\-:]+)/);\r\n    let modifiers = name.match(/\\.[^.\\]]+(?=[^\\]]*$)/g) || [];\r\n    let original = originalAttributeOverride || transformedAttributeMap[name] || name;\r\n    return {\r\n      type: typeMatch ? typeMatch[1] : null,\r\n      value: valueMatch ? valueMatch[1] : null,\r\n      modifiers: modifiers.map((i) => i.replace(\".\", \"\")),\r\n      expression: value,\r\n      original\r\n    };\r\n  };\r\n}\r\nvar DEFAULT = \"DEFAULT\";\r\nvar directiveOrder = [\r\n  \"ignore\",\r\n  \"ref\",\r\n  \"data\",\r\n  \"id\",\r\n  \"bind\",\r\n  \"init\",\r\n  \"for\",\r\n  \"model\",\r\n  \"modelable\",\r\n  \"transition\",\r\n  \"show\",\r\n  \"if\",\r\n  DEFAULT,\r\n  \"teleport\"\r\n];\r\nfunction byPriority(a, b) {\r\n  let typeA = directiveOrder.indexOf(a.type) === -1 ? DEFAULT : a.type;\r\n  let typeB = directiveOrder.indexOf(b.type) === -1 ? DEFAULT : b.type;\r\n  return directiveOrder.indexOf(typeA) - directiveOrder.indexOf(typeB);\r\n}\r\n\r\n// packages/alpinejs/src/utils/dispatch.js\r\nfunction dispatch(el, name, detail = {}) {\r\n  el.dispatchEvent(\r\n    new CustomEvent(name, {\r\n      detail,\r\n      bubbles: true,\r\n      // Allows events to pass the shadow DOM barrier.\r\n      composed: true,\r\n      cancelable: true\r\n    })\r\n  );\r\n}\r\n\r\n// packages/alpinejs/src/utils/walk.js\r\nfunction walk(el, callback) {\r\n  if (typeof ShadowRoot === \"function\" && el instanceof ShadowRoot) {\r\n    Array.from(el.children).forEach((el2) => walk(el2, callback));\r\n    return;\r\n  }\r\n  let skip = false;\r\n  callback(el, () => skip = true);\r\n  if (skip)\r\n    return;\r\n  let node = el.firstElementChild;\r\n  while (node) {\r\n    walk(node, callback, false);\r\n    node = node.nextElementSibling;\r\n  }\r\n}\r\n\r\n// packages/alpinejs/src/utils/warn.js\r\nfunction warn(message, ...args) {\r\n  console.warn(`Alpine Warning: ${message}`, ...args);\r\n}\r\n\r\n// packages/alpinejs/src/lifecycle.js\r\nfunction start() {\r\n  if (!document.body)\r\n    warn(\"Unable to initialize. Trying to load Alpine before `<body>` is available. Did you forget to add `defer` in Alpine's `<script>` tag?\");\r\n  dispatch(document, \"alpine:init\");\r\n  dispatch(document, \"alpine:initializing\");\r\n  startObservingMutations();\r\n  onElAdded((el) => initTree(el, walk));\r\n  onElRemoved((el) => destroyTree(el));\r\n  onAttributesAdded((el, attrs) => {\r\n    directives(el, attrs).forEach((handle) => handle());\r\n  });\r\n  let outNestedComponents = (el) => !closestRoot(el.parentElement, true);\r\n  Array.from(document.querySelectorAll(allSelectors())).filter(outNestedComponents).forEach((el) => {\r\n    initTree(el);\r\n  });\r\n  dispatch(document, \"alpine:initialized\");\r\n}\r\nvar rootSelectorCallbacks = [];\r\nvar initSelectorCallbacks = [];\r\nfunction rootSelectors() {\r\n  return rootSelectorCallbacks.map((fn) => fn());\r\n}\r\nfunction allSelectors() {\r\n  return rootSelectorCallbacks.concat(initSelectorCallbacks).map((fn) => fn());\r\n}\r\nfunction addRootSelector(selectorCallback) {\r\n  rootSelectorCallbacks.push(selectorCallback);\r\n}\r\nfunction addInitSelector(selectorCallback) {\r\n  initSelectorCallbacks.push(selectorCallback);\r\n}\r\nfunction closestRoot(el, includeInitSelectors = false) {\r\n  return findClosest(el, (element) => {\r\n    const selectors = includeInitSelectors ? allSelectors() : rootSelectors();\r\n    if (selectors.some((selector) => element.matches(selector)))\r\n      return true;\r\n  });\r\n}\r\nfunction findClosest(el, callback) {\r\n  if (!el)\r\n    return;\r\n  if (callback(el))\r\n    return el;\r\n  if (el._x_teleportBack)\r\n    el = el._x_teleportBack;\r\n  if (!el.parentElement)\r\n    return;\r\n  return findClosest(el.parentElement, callback);\r\n}\r\nfunction isRoot(el) {\r\n  return rootSelectors().some((selector) => el.matches(selector));\r\n}\r\nvar initInterceptors2 = [];\r\nfunction interceptInit(callback) {\r\n  initInterceptors2.push(callback);\r\n}\r\nfunction initTree(el, walker = walk, intercept = () => {\r\n}) {\r\n  deferHandlingDirectives(() => {\r\n    walker(el, (el2, skip) => {\r\n      intercept(el2, skip);\r\n      initInterceptors2.forEach((i) => i(el2, skip));\r\n      directives(el2, el2.attributes).forEach((handle) => handle());\r\n      el2._x_ignore && skip();\r\n    });\r\n  });\r\n}\r\nfunction destroyTree(root) {\r\n  walk(root, (el) => cleanupAttributes(el));\r\n}\r\n\r\n// packages/alpinejs/src/nextTick.js\r\nvar tickStack = [];\r\nvar isHolding = false;\r\nfunction nextTick(callback = () => {\r\n}) {\r\n  queueMicrotask(() => {\r\n    isHolding || setTimeout(() => {\r\n      releaseNextTicks();\r\n    });\r\n  });\r\n  return new Promise((res) => {\r\n    tickStack.push(() => {\r\n      callback();\r\n      res();\r\n    });\r\n  });\r\n}\r\nfunction releaseNextTicks() {\r\n  isHolding = false;\r\n  while (tickStack.length)\r\n    tickStack.shift()();\r\n}\r\nfunction holdNextTicks() {\r\n  isHolding = true;\r\n}\r\n\r\n// packages/alpinejs/src/utils/classes.js\r\nfunction setClasses(el, value) {\r\n  if (Array.isArray(value)) {\r\n    return setClassesFromString(el, value.join(\" \"));\r\n  } else if (typeof value === \"object\" && value !== null) {\r\n    return setClassesFromObject(el, value);\r\n  } else if (typeof value === \"function\") {\r\n    return setClasses(el, value());\r\n  }\r\n  return setClassesFromString(el, value);\r\n}\r\nfunction setClassesFromString(el, classString) {\r\n  let split = (classString2) => classString2.split(\" \").filter(Boolean);\r\n  let missingClasses = (classString2) => classString2.split(\" \").filter((i) => !el.classList.contains(i)).filter(Boolean);\r\n  let addClassesAndReturnUndo = (classes) => {\r\n    el.classList.add(...classes);\r\n    return () => {\r\n      el.classList.remove(...classes);\r\n    };\r\n  };\r\n  classString = classString === true ? classString = \"\" : classString || \"\";\r\n  return addClassesAndReturnUndo(missingClasses(classString));\r\n}\r\nfunction setClassesFromObject(el, classObject) {\r\n  let split = (classString) => classString.split(\" \").filter(Boolean);\r\n  let forAdd = Object.entries(classObject).flatMap(([classString, bool]) => bool ? split(classString) : false).filter(Boolean);\r\n  let forRemove = Object.entries(classObject).flatMap(([classString, bool]) => !bool ? split(classString) : false).filter(Boolean);\r\n  let added = [];\r\n  let removed = [];\r\n  forRemove.forEach((i) => {\r\n    if (el.classList.contains(i)) {\r\n      el.classList.remove(i);\r\n      removed.push(i);\r\n    }\r\n  });\r\n  forAdd.forEach((i) => {\r\n    if (!el.classList.contains(i)) {\r\n      el.classList.add(i);\r\n      added.push(i);\r\n    }\r\n  });\r\n  return () => {\r\n    removed.forEach((i) => el.classList.add(i));\r\n    added.forEach((i) => el.classList.remove(i));\r\n  };\r\n}\r\n\r\n// packages/alpinejs/src/utils/styles.js\r\nfunction setStyles(el, value) {\r\n  if (typeof value === \"object\" && value !== null) {\r\n    return setStylesFromObject(el, value);\r\n  }\r\n  return setStylesFromString(el, value);\r\n}\r\nfunction setStylesFromObject(el, value) {\r\n  let previousStyles = {};\r\n  Object.entries(value).forEach(([key, value2]) => {\r\n    previousStyles[key] = el.style[key];\r\n    if (!key.startsWith(\"--\")) {\r\n      key = kebabCase(key);\r\n    }\r\n    el.style.setProperty(key, value2);\r\n  });\r\n  setTimeout(() => {\r\n    if (el.style.length === 0) {\r\n      el.removeAttribute(\"style\");\r\n    }\r\n  });\r\n  return () => {\r\n    setStyles(el, previousStyles);\r\n  };\r\n}\r\nfunction setStylesFromString(el, value) {\r\n  let cache = el.getAttribute(\"style\", value);\r\n  el.setAttribute(\"style\", value);\r\n  return () => {\r\n    el.setAttribute(\"style\", cache || \"\");\r\n  };\r\n}\r\nfunction kebabCase(subject) {\r\n  return subject.replace(/([a-z])([A-Z])/g, \"$1-$2\").toLowerCase();\r\n}\r\n\r\n// packages/alpinejs/src/utils/once.js\r\nfunction once(callback, fallback = () => {\r\n}) {\r\n  let called = false;\r\n  return function() {\r\n    if (!called) {\r\n      called = true;\r\n      callback.apply(this, arguments);\r\n    } else {\r\n      fallback.apply(this, arguments);\r\n    }\r\n  };\r\n}\r\n\r\n// packages/alpinejs/src/directives/x-transition.js\r\ndirective(\"transition\", (el, { value, modifiers, expression }, { evaluate: evaluate2 }) => {\r\n  if (typeof expression === \"function\")\r\n    expression = evaluate2(expression);\r\n  if (!expression) {\r\n    registerTransitionsFromHelper(el, modifiers, value);\r\n  } else {\r\n    registerTransitionsFromClassString(el, expression, value);\r\n  }\r\n});\r\nfunction registerTransitionsFromClassString(el, classString, stage) {\r\n  registerTransitionObject(el, setClasses, \"\");\r\n  let directiveStorageMap = {\r\n    \"enter\": (classes) => {\r\n      el._x_transition.enter.during = classes;\r\n    },\r\n    \"enter-start\": (classes) => {\r\n      el._x_transition.enter.start = classes;\r\n    },\r\n    \"enter-end\": (classes) => {\r\n      el._x_transition.enter.end = classes;\r\n    },\r\n    \"leave\": (classes) => {\r\n      el._x_transition.leave.during = classes;\r\n    },\r\n    \"leave-start\": (classes) => {\r\n      el._x_transition.leave.start = classes;\r\n    },\r\n    \"leave-end\": (classes) => {\r\n      el._x_transition.leave.end = classes;\r\n    }\r\n  };\r\n  directiveStorageMap[stage](classString);\r\n}\r\nfunction registerTransitionsFromHelper(el, modifiers, stage) {\r\n  registerTransitionObject(el, setStyles);\r\n  let doesntSpecify = !modifiers.includes(\"in\") && !modifiers.includes(\"out\") && !stage;\r\n  let transitioningIn = doesntSpecify || modifiers.includes(\"in\") || [\"enter\"].includes(stage);\r\n  let transitioningOut = doesntSpecify || modifiers.includes(\"out\") || [\"leave\"].includes(stage);\r\n  if (modifiers.includes(\"in\") && !doesntSpecify) {\r\n    modifiers = modifiers.filter((i, index) => index < modifiers.indexOf(\"out\"));\r\n  }\r\n  if (modifiers.includes(\"out\") && !doesntSpecify) {\r\n    modifiers = modifiers.filter((i, index) => index > modifiers.indexOf(\"out\"));\r\n  }\r\n  let wantsAll = !modifiers.includes(\"opacity\") && !modifiers.includes(\"scale\");\r\n  let wantsOpacity = wantsAll || modifiers.includes(\"opacity\");\r\n  let wantsScale = wantsAll || modifiers.includes(\"scale\");\r\n  let opacityValue = wantsOpacity ? 0 : 1;\r\n  let scaleValue = wantsScale ? modifierValue(modifiers, \"scale\", 95) / 100 : 1;\r\n  let delay = modifierValue(modifiers, \"delay\", 0);\r\n  let origin = modifierValue(modifiers, \"origin\", \"center\");\r\n  let property = \"opacity, transform\";\r\n  let durationIn = modifierValue(modifiers, \"duration\", 150) / 1e3;\r\n  let durationOut = modifierValue(modifiers, \"duration\", 75) / 1e3;\r\n  let easing = `cubic-bezier(0.4, 0.0, 0.2, 1)`;\r\n  if (transitioningIn) {\r\n    el._x_transition.enter.during = {\r\n      transformOrigin: origin,\r\n      transitionDelay: delay,\r\n      transitionProperty: property,\r\n      transitionDuration: `${durationIn}s`,\r\n      transitionTimingFunction: easing\r\n    };\r\n    el._x_transition.enter.start = {\r\n      opacity: opacityValue,\r\n      transform: `scale(${scaleValue})`\r\n    };\r\n    el._x_transition.enter.end = {\r\n      opacity: 1,\r\n      transform: `scale(1)`\r\n    };\r\n  }\r\n  if (transitioningOut) {\r\n    el._x_transition.leave.during = {\r\n      transformOrigin: origin,\r\n      transitionDelay: delay,\r\n      transitionProperty: property,\r\n      transitionDuration: `${durationOut}s`,\r\n      transitionTimingFunction: easing\r\n    };\r\n    el._x_transition.leave.start = {\r\n      opacity: 1,\r\n      transform: `scale(1)`\r\n    };\r\n    el._x_transition.leave.end = {\r\n      opacity: opacityValue,\r\n      transform: `scale(${scaleValue})`\r\n    };\r\n  }\r\n}\r\nfunction registerTransitionObject(el, setFunction, defaultValue = {}) {\r\n  if (!el._x_transition)\r\n    el._x_transition = {\r\n      enter: { during: defaultValue, start: defaultValue, end: defaultValue },\r\n      leave: { during: defaultValue, start: defaultValue, end: defaultValue },\r\n      in(before = () => {\r\n      }, after = () => {\r\n      }) {\r\n        transition(el, setFunction, {\r\n          during: this.enter.during,\r\n          start: this.enter.start,\r\n          end: this.enter.end\r\n        }, before, after);\r\n      },\r\n      out(before = () => {\r\n      }, after = () => {\r\n      }) {\r\n        transition(el, setFunction, {\r\n          during: this.leave.during,\r\n          start: this.leave.start,\r\n          end: this.leave.end\r\n        }, before, after);\r\n      }\r\n    };\r\n}\r\nwindow.Element.prototype._x_toggleAndCascadeWithTransitions = function(el, value, show, hide) {\r\n  const nextTick2 = document.visibilityState === \"visible\" ? requestAnimationFrame : setTimeout;\r\n  let clickAwayCompatibleShow = () => nextTick2(show);\r\n  if (value) {\r\n    if (el._x_transition && (el._x_transition.enter || el._x_transition.leave)) {\r\n      el._x_transition.enter && (Object.entries(el._x_transition.enter.during).length || Object.entries(el._x_transition.enter.start).length || Object.entries(el._x_transition.enter.end).length) ? el._x_transition.in(show) : clickAwayCompatibleShow();\r\n    } else {\r\n      el._x_transition ? el._x_transition.in(show) : clickAwayCompatibleShow();\r\n    }\r\n    return;\r\n  }\r\n  el._x_hidePromise = el._x_transition ? new Promise((resolve, reject) => {\r\n    el._x_transition.out(() => {\r\n    }, () => resolve(hide));\r\n    el._x_transitioning.beforeCancel(() => reject({ isFromCancelledTransition: true }));\r\n  }) : Promise.resolve(hide);\r\n  queueMicrotask(() => {\r\n    let closest = closestHide(el);\r\n    if (closest) {\r\n      if (!closest._x_hideChildren)\r\n        closest._x_hideChildren = [];\r\n      closest._x_hideChildren.push(el);\r\n    } else {\r\n      nextTick2(() => {\r\n        let hideAfterChildren = (el2) => {\r\n          let carry = Promise.all([\r\n            el2._x_hidePromise,\r\n            ...(el2._x_hideChildren || []).map(hideAfterChildren)\r\n          ]).then(([i]) => i());\r\n          delete el2._x_hidePromise;\r\n          delete el2._x_hideChildren;\r\n          return carry;\r\n        };\r\n        hideAfterChildren(el).catch((e) => {\r\n          if (!e.isFromCancelledTransition)\r\n            throw e;\r\n        });\r\n      });\r\n    }\r\n  });\r\n};\r\nfunction closestHide(el) {\r\n  let parent = el.parentNode;\r\n  if (!parent)\r\n    return;\r\n  return parent._x_hidePromise ? parent : closestHide(parent);\r\n}\r\nfunction transition(el, setFunction, { during, start: start2, end } = {}, before = () => {\r\n}, after = () => {\r\n}) {\r\n  if (el._x_transitioning)\r\n    el._x_transitioning.cancel();\r\n  if (Object.keys(during).length === 0 && Object.keys(start2).length === 0 && Object.keys(end).length === 0) {\r\n    before();\r\n    after();\r\n    return;\r\n  }\r\n  let undoStart, undoDuring, undoEnd;\r\n  performTransition(el, {\r\n    start() {\r\n      undoStart = setFunction(el, start2);\r\n    },\r\n    during() {\r\n      undoDuring = setFunction(el, during);\r\n    },\r\n    before,\r\n    end() {\r\n      undoStart();\r\n      undoEnd = setFunction(el, end);\r\n    },\r\n    after,\r\n    cleanup() {\r\n      undoDuring();\r\n      undoEnd();\r\n    }\r\n  });\r\n}\r\nfunction performTransition(el, stages) {\r\n  let interrupted, reachedBefore, reachedEnd;\r\n  let finish = once(() => {\r\n    mutateDom(() => {\r\n      interrupted = true;\r\n      if (!reachedBefore)\r\n        stages.before();\r\n      if (!reachedEnd) {\r\n        stages.end();\r\n        releaseNextTicks();\r\n      }\r\n      stages.after();\r\n      if (el.isConnected)\r\n        stages.cleanup();\r\n      delete el._x_transitioning;\r\n    });\r\n  });\r\n  el._x_transitioning = {\r\n    beforeCancels: [],\r\n    beforeCancel(callback) {\r\n      this.beforeCancels.push(callback);\r\n    },\r\n    cancel: once(function() {\r\n      while (this.beforeCancels.length) {\r\n        this.beforeCancels.shift()();\r\n      }\r\n      ;\r\n      finish();\r\n    }),\r\n    finish\r\n  };\r\n  mutateDom(() => {\r\n    stages.start();\r\n    stages.during();\r\n  });\r\n  holdNextTicks();\r\n  requestAnimationFrame(() => {\r\n    if (interrupted)\r\n      return;\r\n    let duration = Number(getComputedStyle(el).transitionDuration.replace(/,.*/, \"\").replace(\"s\", \"\")) * 1e3;\r\n    let delay = Number(getComputedStyle(el).transitionDelay.replace(/,.*/, \"\").replace(\"s\", \"\")) * 1e3;\r\n    if (duration === 0)\r\n      duration = Number(getComputedStyle(el).animationDuration.replace(\"s\", \"\")) * 1e3;\r\n    mutateDom(() => {\r\n      stages.before();\r\n    });\r\n    reachedBefore = true;\r\n    requestAnimationFrame(() => {\r\n      if (interrupted)\r\n        return;\r\n      mutateDom(() => {\r\n        stages.end();\r\n      });\r\n      releaseNextTicks();\r\n      setTimeout(el._x_transitioning.finish, duration + delay);\r\n      reachedEnd = true;\r\n    });\r\n  });\r\n}\r\nfunction modifierValue(modifiers, key, fallback) {\r\n  if (modifiers.indexOf(key) === -1)\r\n    return fallback;\r\n  const rawValue = modifiers[modifiers.indexOf(key) + 1];\r\n  if (!rawValue)\r\n    return fallback;\r\n  if (key === \"scale\") {\r\n    if (isNaN(rawValue))\r\n      return fallback;\r\n  }\r\n  if (key === \"duration\") {\r\n    let match = rawValue.match(/([0-9]+)ms/);\r\n    if (match)\r\n      return match[1];\r\n  }\r\n  if (key === \"origin\") {\r\n    if ([\"top\", \"right\", \"left\", \"center\", \"bottom\"].includes(modifiers[modifiers.indexOf(key) + 2])) {\r\n      return [rawValue, modifiers[modifiers.indexOf(key) + 2]].join(\" \");\r\n    }\r\n  }\r\n  return rawValue;\r\n}\r\n\r\n// packages/alpinejs/src/clone.js\r\nvar isCloning = false;\r\nfunction skipDuringClone(callback, fallback = () => {\r\n}) {\r\n  return (...args) => isCloning ? fallback(...args) : callback(...args);\r\n}\r\nfunction onlyDuringClone(callback) {\r\n  return (...args) => isCloning && callback(...args);\r\n}\r\nfunction clone(oldEl, newEl) {\r\n  if (!newEl._x_dataStack)\r\n    newEl._x_dataStack = oldEl._x_dataStack;\r\n  isCloning = true;\r\n  dontRegisterReactiveSideEffects(() => {\r\n    cloneTree(newEl);\r\n  });\r\n  isCloning = false;\r\n}\r\nfunction cloneTree(el) {\r\n  let hasRunThroughFirstEl = false;\r\n  let shallowWalker = (el2, callback) => {\r\n    walk(el2, (el3, skip) => {\r\n      if (hasRunThroughFirstEl && isRoot(el3))\r\n        return skip();\r\n      hasRunThroughFirstEl = true;\r\n      callback(el3, skip);\r\n    });\r\n  };\r\n  initTree(el, shallowWalker);\r\n}\r\nfunction dontRegisterReactiveSideEffects(callback) {\r\n  let cache = effect;\r\n  overrideEffect((callback2, el) => {\r\n    let storedEffect = cache(callback2);\r\n    release(storedEffect);\r\n    return () => {\r\n    };\r\n  });\r\n  callback();\r\n  overrideEffect(cache);\r\n}\r\n\r\n// packages/alpinejs/src/utils/bind.js\r\nfunction bind(el, name, value, modifiers = []) {\r\n  if (!el._x_bindings)\r\n    el._x_bindings = reactive({});\r\n  el._x_bindings[name] = value;\r\n  name = modifiers.includes(\"camel\") ? camelCase(name) : name;\r\n  switch (name) {\r\n    case \"value\":\r\n      bindInputValue(el, value);\r\n      break;\r\n    case \"style\":\r\n      bindStyles(el, value);\r\n      break;\r\n    case \"class\":\r\n      bindClasses(el, value);\r\n      break;\r\n    default:\r\n      bindAttribute(el, name, value);\r\n      break;\r\n  }\r\n}\r\nfunction bindInputValue(el, value) {\r\n  if (el.type === \"radio\") {\r\n    if (el.attributes.value === void 0) {\r\n      el.value = value;\r\n    }\r\n    if (window.fromModel) {\r\n      el.checked = checkedAttrLooseCompare(el.value, value);\r\n    }\r\n  } else if (el.type === \"checkbox\") {\r\n    if (Number.isInteger(value)) {\r\n      el.value = value;\r\n    } else if (!Number.isInteger(value) && !Array.isArray(value) && typeof value !== \"boolean\" && ![null, void 0].includes(value)) {\r\n      el.value = String(value);\r\n    } else {\r\n      if (Array.isArray(value)) {\r\n        el.checked = value.some((val) => checkedAttrLooseCompare(val, el.value));\r\n      } else {\r\n        el.checked = !!value;\r\n      }\r\n    }\r\n  } else if (el.tagName === \"SELECT\") {\r\n    updateSelect(el, value);\r\n  } else {\r\n    if (el.value === value)\r\n      return;\r\n    el.value = value;\r\n  }\r\n}\r\nfunction bindClasses(el, value) {\r\n  if (el._x_undoAddedClasses)\r\n    el._x_undoAddedClasses();\r\n  el._x_undoAddedClasses = setClasses(el, value);\r\n}\r\nfunction bindStyles(el, value) {\r\n  if (el._x_undoAddedStyles)\r\n    el._x_undoAddedStyles();\r\n  el._x_undoAddedStyles = setStyles(el, value);\r\n}\r\nfunction bindAttribute(el, name, value) {\r\n  if ([null, void 0, false].includes(value) && attributeShouldntBePreservedIfFalsy(name)) {\r\n    el.removeAttribute(name);\r\n  } else {\r\n    if (isBooleanAttr(name))\r\n      value = name;\r\n    setIfChanged(el, name, value);\r\n  }\r\n}\r\nfunction setIfChanged(el, attrName, value) {\r\n  if (el.getAttribute(attrName) != value) {\r\n    el.setAttribute(attrName, value);\r\n  }\r\n}\r\nfunction updateSelect(el, value) {\r\n  const arrayWrappedValue = [].concat(value).map((value2) => {\r\n    return value2 + \"\";\r\n  });\r\n  Array.from(el.options).forEach((option) => {\r\n    option.selected = arrayWrappedValue.includes(option.value);\r\n  });\r\n}\r\nfunction camelCase(subject) {\r\n  return subject.toLowerCase().replace(/-(\\w)/g, (match, char) => char.toUpperCase());\r\n}\r\nfunction checkedAttrLooseCompare(valueA, valueB) {\r\n  return valueA == valueB;\r\n}\r\nfunction isBooleanAttr(attrName) {\r\n  const booleanAttributes = [\r\n    \"disabled\",\r\n    \"checked\",\r\n    \"required\",\r\n    \"readonly\",\r\n    \"hidden\",\r\n    \"open\",\r\n    \"selected\",\r\n    \"autofocus\",\r\n    \"itemscope\",\r\n    \"multiple\",\r\n    \"novalidate\",\r\n    \"allowfullscreen\",\r\n    \"allowpaymentrequest\",\r\n    \"formnovalidate\",\r\n    \"autoplay\",\r\n    \"controls\",\r\n    \"loop\",\r\n    \"muted\",\r\n    \"playsinline\",\r\n    \"default\",\r\n    \"ismap\",\r\n    \"reversed\",\r\n    \"async\",\r\n    \"defer\",\r\n    \"nomodule\"\r\n  ];\r\n  return booleanAttributes.includes(attrName);\r\n}\r\nfunction attributeShouldntBePreservedIfFalsy(name) {\r\n  return ![\"aria-pressed\", \"aria-checked\", \"aria-expanded\", \"aria-selected\"].includes(name);\r\n}\r\nfunction getBinding(el, name, fallback) {\r\n  if (el._x_bindings && el._x_bindings[name] !== void 0)\r\n    return el._x_bindings[name];\r\n  let attr = el.getAttribute(name);\r\n  if (attr === null)\r\n    return typeof fallback === \"function\" ? fallback() : fallback;\r\n  if (attr === \"\")\r\n    return true;\r\n  if (isBooleanAttr(name)) {\r\n    return !![name, \"true\"].includes(attr);\r\n  }\r\n  return attr;\r\n}\r\n\r\n// packages/alpinejs/src/utils/debounce.js\r\nfunction debounce(func, wait) {\r\n  var timeout;\r\n  return function() {\r\n    var context = this, args = arguments;\r\n    var later = function() {\r\n      timeout = null;\r\n      func.apply(context, args);\r\n    };\r\n    clearTimeout(timeout);\r\n    timeout = setTimeout(later, wait);\r\n  };\r\n}\r\n\r\n// packages/alpinejs/src/utils/throttle.js\r\nfunction throttle(func, limit) {\r\n  let inThrottle;\r\n  return function() {\r\n    let context = this, args = arguments;\r\n    if (!inThrottle) {\r\n      func.apply(context, args);\r\n      inThrottle = true;\r\n      setTimeout(() => inThrottle = false, limit);\r\n    }\r\n  };\r\n}\r\n\r\n// packages/alpinejs/src/plugin.js\r\nfunction plugin(callback) {\r\n  callback(alpine_default);\r\n}\r\n\r\n// packages/alpinejs/src/store.js\r\nvar stores = {};\r\nvar isReactive = false;\r\nfunction store(name, value) {\r\n  if (!isReactive) {\r\n    stores = reactive(stores);\r\n    isReactive = true;\r\n  }\r\n  if (value === void 0) {\r\n    return stores[name];\r\n  }\r\n  stores[name] = value;\r\n  if (typeof value === \"object\" && value !== null && value.hasOwnProperty(\"init\") && typeof value.init === \"function\") {\r\n    stores[name].init();\r\n  }\r\n  initInterceptors(stores[name]);\r\n}\r\nfunction getStores() {\r\n  return stores;\r\n}\r\n\r\n// packages/alpinejs/src/binds.js\r\nvar binds = {};\r\nfunction bind2(name, bindings) {\r\n  let getBindings = typeof bindings !== \"function\" ? () => bindings : bindings;\r\n  if (name instanceof Element) {\r\n    applyBindingsObject(name, getBindings());\r\n  } else {\r\n    binds[name] = getBindings;\r\n  }\r\n}\r\nfunction injectBindingProviders(obj) {\r\n  Object.entries(binds).forEach(([name, callback]) => {\r\n    Object.defineProperty(obj, name, {\r\n      get() {\r\n        return (...args) => {\r\n          return callback(...args);\r\n        };\r\n      }\r\n    });\r\n  });\r\n  return obj;\r\n}\r\nfunction applyBindingsObject(el, obj, original) {\r\n  let cleanupRunners = [];\r\n  while (cleanupRunners.length)\r\n    cleanupRunners.pop()();\r\n  let attributes = Object.entries(obj).map(([name, value]) => ({ name, value }));\r\n  let staticAttributes = attributesOnly(attributes);\r\n  attributes = attributes.map((attribute) => {\r\n    if (staticAttributes.find((attr) => attr.name === attribute.name)) {\r\n      return {\r\n        name: `x-bind:${attribute.name}`,\r\n        value: `\"${attribute.value}\"`\r\n      };\r\n    }\r\n    return attribute;\r\n  });\r\n  directives(el, attributes, original).map((handle) => {\r\n    cleanupRunners.push(handle.runCleanups);\r\n    handle();\r\n  });\r\n}\r\n\r\n// packages/alpinejs/src/datas.js\r\nvar datas = {};\r\nfunction data(name, callback) {\r\n  datas[name] = callback;\r\n}\r\nfunction injectDataProviders(obj, context) {\r\n  Object.entries(datas).forEach(([name, callback]) => {\r\n    Object.defineProperty(obj, name, {\r\n      get() {\r\n        return (...args) => {\r\n          return callback.bind(context)(...args);\r\n        };\r\n      },\r\n      enumerable: false\r\n    });\r\n  });\r\n  return obj;\r\n}\r\n\r\n// packages/alpinejs/src/alpine.js\r\nvar Alpine = {\r\n  get reactive() {\r\n    return reactive;\r\n  },\r\n  get release() {\r\n    return release;\r\n  },\r\n  get effect() {\r\n    return effect;\r\n  },\r\n  get raw() {\r\n    return raw;\r\n  },\r\n  version: \"3.12.0\",\r\n  flushAndStopDeferringMutations,\r\n  dontAutoEvaluateFunctions,\r\n  disableEffectScheduling,\r\n  startObservingMutations,\r\n  stopObservingMutations,\r\n  setReactivityEngine,\r\n  closestDataStack,\r\n  skipDuringClone,\r\n  onlyDuringClone,\r\n  addRootSelector,\r\n  addInitSelector,\r\n  addScopeToNode,\r\n  deferMutations,\r\n  mapAttributes,\r\n  evaluateLater,\r\n  interceptInit,\r\n  setEvaluator,\r\n  mergeProxies,\r\n  findClosest,\r\n  closestRoot,\r\n  destroyTree,\r\n  interceptor,\r\n  // INTERNAL: not public API and is subject to change without major release.\r\n  transition,\r\n  // INTERNAL\r\n  setStyles,\r\n  // INTERNAL\r\n  mutateDom,\r\n  directive,\r\n  throttle,\r\n  debounce,\r\n  evaluate,\r\n  initTree,\r\n  nextTick,\r\n  prefixed: prefix,\r\n  prefix: setPrefix,\r\n  plugin,\r\n  magic,\r\n  store,\r\n  start,\r\n  clone,\r\n  bound: getBinding,\r\n  $data: scope,\r\n  walk,\r\n  data,\r\n  bind: bind2\r\n};\r\nvar alpine_default = Alpine;\r\n\r\n// node_modules/@vue/shared/dist/shared.esm-bundler.js\r\nfunction makeMap(str, expectsLowerCase) {\r\n  const map = /* @__PURE__ */ Object.create(null);\r\n  const list = str.split(\",\");\r\n  for (let i = 0; i < list.length; i++) {\r\n    map[list[i]] = true;\r\n  }\r\n  return expectsLowerCase ? (val) => !!map[val.toLowerCase()] : (val) => !!map[val];\r\n}\r\nvar specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;\r\nvar isBooleanAttr2 = /* @__PURE__ */ makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,loop,open,required,reversed,scoped,seamless,checked,muted,multiple,selected`);\r\nvar EMPTY_OBJ =  true ? Object.freeze({}) : 0;\r\nvar EMPTY_ARR =  true ? Object.freeze([]) : 0;\r\nvar extend = Object.assign;\r\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\r\nvar hasOwn = (val, key) => hasOwnProperty.call(val, key);\r\nvar isArray = Array.isArray;\r\nvar isMap = (val) => toTypeString(val) === \"[object Map]\";\r\nvar isString = (val) => typeof val === \"string\";\r\nvar isSymbol = (val) => typeof val === \"symbol\";\r\nvar isObject = (val) => val !== null && typeof val === \"object\";\r\nvar objectToString = Object.prototype.toString;\r\nvar toTypeString = (value) => objectToString.call(value);\r\nvar toRawType = (value) => {\r\n  return toTypeString(value).slice(8, -1);\r\n};\r\nvar isIntegerKey = (key) => isString(key) && key !== \"NaN\" && key[0] !== \"-\" && \"\" + parseInt(key, 10) === key;\r\nvar cacheStringFunction = (fn) => {\r\n  const cache = /* @__PURE__ */ Object.create(null);\r\n  return (str) => {\r\n    const hit = cache[str];\r\n    return hit || (cache[str] = fn(str));\r\n  };\r\n};\r\nvar camelizeRE = /-(\\w)/g;\r\nvar camelize = cacheStringFunction((str) => {\r\n  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : \"\");\r\n});\r\nvar hyphenateRE = /\\B([A-Z])/g;\r\nvar hyphenate = cacheStringFunction((str) => str.replace(hyphenateRE, \"-$1\").toLowerCase());\r\nvar capitalize = cacheStringFunction((str) => str.charAt(0).toUpperCase() + str.slice(1));\r\nvar toHandlerKey = cacheStringFunction((str) => str ? `on${capitalize(str)}` : ``);\r\nvar hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);\r\n\r\n// node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\r\nvar targetMap = /* @__PURE__ */ new WeakMap();\r\nvar effectStack = [];\r\nvar activeEffect;\r\nvar ITERATE_KEY = Symbol( true ? \"iterate\" : 0);\r\nvar MAP_KEY_ITERATE_KEY = Symbol( true ? \"Map key iterate\" : 0);\r\nfunction isEffect(fn) {\r\n  return fn && fn._isEffect === true;\r\n}\r\nfunction effect2(fn, options = EMPTY_OBJ) {\r\n  if (isEffect(fn)) {\r\n    fn = fn.raw;\r\n  }\r\n  const effect3 = createReactiveEffect(fn, options);\r\n  if (!options.lazy) {\r\n    effect3();\r\n  }\r\n  return effect3;\r\n}\r\nfunction stop(effect3) {\r\n  if (effect3.active) {\r\n    cleanup(effect3);\r\n    if (effect3.options.onStop) {\r\n      effect3.options.onStop();\r\n    }\r\n    effect3.active = false;\r\n  }\r\n}\r\nvar uid = 0;\r\nfunction createReactiveEffect(fn, options) {\r\n  const effect3 = function reactiveEffect() {\r\n    if (!effect3.active) {\r\n      return fn();\r\n    }\r\n    if (!effectStack.includes(effect3)) {\r\n      cleanup(effect3);\r\n      try {\r\n        enableTracking();\r\n        effectStack.push(effect3);\r\n        activeEffect = effect3;\r\n        return fn();\r\n      } finally {\r\n        effectStack.pop();\r\n        resetTracking();\r\n        activeEffect = effectStack[effectStack.length - 1];\r\n      }\r\n    }\r\n  };\r\n  effect3.id = uid++;\r\n  effect3.allowRecurse = !!options.allowRecurse;\r\n  effect3._isEffect = true;\r\n  effect3.active = true;\r\n  effect3.raw = fn;\r\n  effect3.deps = [];\r\n  effect3.options = options;\r\n  return effect3;\r\n}\r\nfunction cleanup(effect3) {\r\n  const { deps } = effect3;\r\n  if (deps.length) {\r\n    for (let i = 0; i < deps.length; i++) {\r\n      deps[i].delete(effect3);\r\n    }\r\n    deps.length = 0;\r\n  }\r\n}\r\nvar shouldTrack = true;\r\nvar trackStack = [];\r\nfunction pauseTracking() {\r\n  trackStack.push(shouldTrack);\r\n  shouldTrack = false;\r\n}\r\nfunction enableTracking() {\r\n  trackStack.push(shouldTrack);\r\n  shouldTrack = true;\r\n}\r\nfunction resetTracking() {\r\n  const last = trackStack.pop();\r\n  shouldTrack = last === void 0 ? true : last;\r\n}\r\nfunction track(target, type, key) {\r\n  if (!shouldTrack || activeEffect === void 0) {\r\n    return;\r\n  }\r\n  let depsMap = targetMap.get(target);\r\n  if (!depsMap) {\r\n    targetMap.set(target, depsMap = /* @__PURE__ */ new Map());\r\n  }\r\n  let dep = depsMap.get(key);\r\n  if (!dep) {\r\n    depsMap.set(key, dep = /* @__PURE__ */ new Set());\r\n  }\r\n  if (!dep.has(activeEffect)) {\r\n    dep.add(activeEffect);\r\n    activeEffect.deps.push(dep);\r\n    if (activeEffect.options.onTrack) {\r\n      activeEffect.options.onTrack({\r\n        effect: activeEffect,\r\n        target,\r\n        type,\r\n        key\r\n      });\r\n    }\r\n  }\r\n}\r\nfunction trigger(target, type, key, newValue, oldValue, oldTarget) {\r\n  const depsMap = targetMap.get(target);\r\n  if (!depsMap) {\r\n    return;\r\n  }\r\n  const effects = /* @__PURE__ */ new Set();\r\n  const add2 = (effectsToAdd) => {\r\n    if (effectsToAdd) {\r\n      effectsToAdd.forEach((effect3) => {\r\n        if (effect3 !== activeEffect || effect3.allowRecurse) {\r\n          effects.add(effect3);\r\n        }\r\n      });\r\n    }\r\n  };\r\n  if (type === \"clear\") {\r\n    depsMap.forEach(add2);\r\n  } else if (key === \"length\" && isArray(target)) {\r\n    depsMap.forEach((dep, key2) => {\r\n      if (key2 === \"length\" || key2 >= newValue) {\r\n        add2(dep);\r\n      }\r\n    });\r\n  } else {\r\n    if (key !== void 0) {\r\n      add2(depsMap.get(key));\r\n    }\r\n    switch (type) {\r\n      case \"add\":\r\n        if (!isArray(target)) {\r\n          add2(depsMap.get(ITERATE_KEY));\r\n          if (isMap(target)) {\r\n            add2(depsMap.get(MAP_KEY_ITERATE_KEY));\r\n          }\r\n        } else if (isIntegerKey(key)) {\r\n          add2(depsMap.get(\"length\"));\r\n        }\r\n        break;\r\n      case \"delete\":\r\n        if (!isArray(target)) {\r\n          add2(depsMap.get(ITERATE_KEY));\r\n          if (isMap(target)) {\r\n            add2(depsMap.get(MAP_KEY_ITERATE_KEY));\r\n          }\r\n        }\r\n        break;\r\n      case \"set\":\r\n        if (isMap(target)) {\r\n          add2(depsMap.get(ITERATE_KEY));\r\n        }\r\n        break;\r\n    }\r\n  }\r\n  const run = (effect3) => {\r\n    if (effect3.options.onTrigger) {\r\n      effect3.options.onTrigger({\r\n        effect: effect3,\r\n        target,\r\n        key,\r\n        type,\r\n        newValue,\r\n        oldValue,\r\n        oldTarget\r\n      });\r\n    }\r\n    if (effect3.options.scheduler) {\r\n      effect3.options.scheduler(effect3);\r\n    } else {\r\n      effect3();\r\n    }\r\n  };\r\n  effects.forEach(run);\r\n}\r\nvar isNonTrackableKeys = /* @__PURE__ */ makeMap(`__proto__,__v_isRef,__isVue`);\r\nvar builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map((key) => Symbol[key]).filter(isSymbol));\r\nvar get2 = /* @__PURE__ */ createGetter();\r\nvar shallowGet = /* @__PURE__ */ createGetter(false, true);\r\nvar readonlyGet = /* @__PURE__ */ createGetter(true);\r\nvar shallowReadonlyGet = /* @__PURE__ */ createGetter(true, true);\r\nvar arrayInstrumentations = {};\r\n[\"includes\", \"indexOf\", \"lastIndexOf\"].forEach((key) => {\r\n  const method = Array.prototype[key];\r\n  arrayInstrumentations[key] = function(...args) {\r\n    const arr = toRaw(this);\r\n    for (let i = 0, l = this.length; i < l; i++) {\r\n      track(arr, \"get\", i + \"\");\r\n    }\r\n    const res = method.apply(arr, args);\r\n    if (res === -1 || res === false) {\r\n      return method.apply(arr, args.map(toRaw));\r\n    } else {\r\n      return res;\r\n    }\r\n  };\r\n});\r\n[\"push\", \"pop\", \"shift\", \"unshift\", \"splice\"].forEach((key) => {\r\n  const method = Array.prototype[key];\r\n  arrayInstrumentations[key] = function(...args) {\r\n    pauseTracking();\r\n    const res = method.apply(this, args);\r\n    resetTracking();\r\n    return res;\r\n  };\r\n});\r\nfunction createGetter(isReadonly = false, shallow = false) {\r\n  return function get3(target, key, receiver) {\r\n    if (key === \"__v_isReactive\") {\r\n      return !isReadonly;\r\n    } else if (key === \"__v_isReadonly\") {\r\n      return isReadonly;\r\n    } else if (key === \"__v_raw\" && receiver === (isReadonly ? shallow ? shallowReadonlyMap : readonlyMap : shallow ? shallowReactiveMap : reactiveMap).get(target)) {\r\n      return target;\r\n    }\r\n    const targetIsArray = isArray(target);\r\n    if (!isReadonly && targetIsArray && hasOwn(arrayInstrumentations, key)) {\r\n      return Reflect.get(arrayInstrumentations, key, receiver);\r\n    }\r\n    const res = Reflect.get(target, key, receiver);\r\n    if (isSymbol(key) ? builtInSymbols.has(key) : isNonTrackableKeys(key)) {\r\n      return res;\r\n    }\r\n    if (!isReadonly) {\r\n      track(target, \"get\", key);\r\n    }\r\n    if (shallow) {\r\n      return res;\r\n    }\r\n    if (isRef(res)) {\r\n      const shouldUnwrap = !targetIsArray || !isIntegerKey(key);\r\n      return shouldUnwrap ? res.value : res;\r\n    }\r\n    if (isObject(res)) {\r\n      return isReadonly ? readonly(res) : reactive2(res);\r\n    }\r\n    return res;\r\n  };\r\n}\r\nvar set2 = /* @__PURE__ */ createSetter();\r\nvar shallowSet = /* @__PURE__ */ createSetter(true);\r\nfunction createSetter(shallow = false) {\r\n  return function set3(target, key, value, receiver) {\r\n    let oldValue = target[key];\r\n    if (!shallow) {\r\n      value = toRaw(value);\r\n      oldValue = toRaw(oldValue);\r\n      if (!isArray(target) && isRef(oldValue) && !isRef(value)) {\r\n        oldValue.value = value;\r\n        return true;\r\n      }\r\n    }\r\n    const hadKey = isArray(target) && isIntegerKey(key) ? Number(key) < target.length : hasOwn(target, key);\r\n    const result = Reflect.set(target, key, value, receiver);\r\n    if (target === toRaw(receiver)) {\r\n      if (!hadKey) {\r\n        trigger(target, \"add\", key, value);\r\n      } else if (hasChanged(value, oldValue)) {\r\n        trigger(target, \"set\", key, value, oldValue);\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n}\r\nfunction deleteProperty(target, key) {\r\n  const hadKey = hasOwn(target, key);\r\n  const oldValue = target[key];\r\n  const result = Reflect.deleteProperty(target, key);\r\n  if (result && hadKey) {\r\n    trigger(target, \"delete\", key, void 0, oldValue);\r\n  }\r\n  return result;\r\n}\r\nfunction has(target, key) {\r\n  const result = Reflect.has(target, key);\r\n  if (!isSymbol(key) || !builtInSymbols.has(key)) {\r\n    track(target, \"has\", key);\r\n  }\r\n  return result;\r\n}\r\nfunction ownKeys(target) {\r\n  track(target, \"iterate\", isArray(target) ? \"length\" : ITERATE_KEY);\r\n  return Reflect.ownKeys(target);\r\n}\r\nvar mutableHandlers = {\r\n  get: get2,\r\n  set: set2,\r\n  deleteProperty,\r\n  has,\r\n  ownKeys\r\n};\r\nvar readonlyHandlers = {\r\n  get: readonlyGet,\r\n  set(target, key) {\r\n    if (true) {\r\n      console.warn(`Set operation on key \"${String(key)}\" failed: target is readonly.`, target);\r\n    }\r\n    return true;\r\n  },\r\n  deleteProperty(target, key) {\r\n    if (true) {\r\n      console.warn(`Delete operation on key \"${String(key)}\" failed: target is readonly.`, target);\r\n    }\r\n    return true;\r\n  }\r\n};\r\nvar shallowReactiveHandlers = extend({}, mutableHandlers, {\r\n  get: shallowGet,\r\n  set: shallowSet\r\n});\r\nvar shallowReadonlyHandlers = extend({}, readonlyHandlers, {\r\n  get: shallowReadonlyGet\r\n});\r\nvar toReactive = (value) => isObject(value) ? reactive2(value) : value;\r\nvar toReadonly = (value) => isObject(value) ? readonly(value) : value;\r\nvar toShallow = (value) => value;\r\nvar getProto = (v) => Reflect.getPrototypeOf(v);\r\nfunction get$1(target, key, isReadonly = false, isShallow = false) {\r\n  target = target[\r\n    \"__v_raw\"\r\n    /* RAW */\r\n  ];\r\n  const rawTarget = toRaw(target);\r\n  const rawKey = toRaw(key);\r\n  if (key !== rawKey) {\r\n    !isReadonly && track(rawTarget, \"get\", key);\r\n  }\r\n  !isReadonly && track(rawTarget, \"get\", rawKey);\r\n  const { has: has2 } = getProto(rawTarget);\r\n  const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n  if (has2.call(rawTarget, key)) {\r\n    return wrap(target.get(key));\r\n  } else if (has2.call(rawTarget, rawKey)) {\r\n    return wrap(target.get(rawKey));\r\n  } else if (target !== rawTarget) {\r\n    target.get(key);\r\n  }\r\n}\r\nfunction has$1(key, isReadonly = false) {\r\n  const target = this[\r\n    \"__v_raw\"\r\n    /* RAW */\r\n  ];\r\n  const rawTarget = toRaw(target);\r\n  const rawKey = toRaw(key);\r\n  if (key !== rawKey) {\r\n    !isReadonly && track(rawTarget, \"has\", key);\r\n  }\r\n  !isReadonly && track(rawTarget, \"has\", rawKey);\r\n  return key === rawKey ? target.has(key) : target.has(key) || target.has(rawKey);\r\n}\r\nfunction size(target, isReadonly = false) {\r\n  target = target[\r\n    \"__v_raw\"\r\n    /* RAW */\r\n  ];\r\n  !isReadonly && track(toRaw(target), \"iterate\", ITERATE_KEY);\r\n  return Reflect.get(target, \"size\", target);\r\n}\r\nfunction add(value) {\r\n  value = toRaw(value);\r\n  const target = toRaw(this);\r\n  const proto = getProto(target);\r\n  const hadKey = proto.has.call(target, value);\r\n  if (!hadKey) {\r\n    target.add(value);\r\n    trigger(target, \"add\", value, value);\r\n  }\r\n  return this;\r\n}\r\nfunction set$1(key, value) {\r\n  value = toRaw(value);\r\n  const target = toRaw(this);\r\n  const { has: has2, get: get3 } = getProto(target);\r\n  let hadKey = has2.call(target, key);\r\n  if (!hadKey) {\r\n    key = toRaw(key);\r\n    hadKey = has2.call(target, key);\r\n  } else if (true) {\r\n    checkIdentityKeys(target, has2, key);\r\n  }\r\n  const oldValue = get3.call(target, key);\r\n  target.set(key, value);\r\n  if (!hadKey) {\r\n    trigger(target, \"add\", key, value);\r\n  } else if (hasChanged(value, oldValue)) {\r\n    trigger(target, \"set\", key, value, oldValue);\r\n  }\r\n  return this;\r\n}\r\nfunction deleteEntry(key) {\r\n  const target = toRaw(this);\r\n  const { has: has2, get: get3 } = getProto(target);\r\n  let hadKey = has2.call(target, key);\r\n  if (!hadKey) {\r\n    key = toRaw(key);\r\n    hadKey = has2.call(target, key);\r\n  } else if (true) {\r\n    checkIdentityKeys(target, has2, key);\r\n  }\r\n  const oldValue = get3 ? get3.call(target, key) : void 0;\r\n  const result = target.delete(key);\r\n  if (hadKey) {\r\n    trigger(target, \"delete\", key, void 0, oldValue);\r\n  }\r\n  return result;\r\n}\r\nfunction clear() {\r\n  const target = toRaw(this);\r\n  const hadItems = target.size !== 0;\r\n  const oldTarget =  true ? isMap(target) ? new Map(target) : new Set(target) : 0;\r\n  const result = target.clear();\r\n  if (hadItems) {\r\n    trigger(target, \"clear\", void 0, void 0, oldTarget);\r\n  }\r\n  return result;\r\n}\r\nfunction createForEach(isReadonly, isShallow) {\r\n  return function forEach(callback, thisArg) {\r\n    const observed = this;\r\n    const target = observed[\r\n      \"__v_raw\"\r\n      /* RAW */\r\n    ];\r\n    const rawTarget = toRaw(target);\r\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n    !isReadonly && track(rawTarget, \"iterate\", ITERATE_KEY);\r\n    return target.forEach((value, key) => {\r\n      return callback.call(thisArg, wrap(value), wrap(key), observed);\r\n    });\r\n  };\r\n}\r\nfunction createIterableMethod(method, isReadonly, isShallow) {\r\n  return function(...args) {\r\n    const target = this[\r\n      \"__v_raw\"\r\n      /* RAW */\r\n    ];\r\n    const rawTarget = toRaw(target);\r\n    const targetIsMap = isMap(rawTarget);\r\n    const isPair = method === \"entries\" || method === Symbol.iterator && targetIsMap;\r\n    const isKeyOnly = method === \"keys\" && targetIsMap;\r\n    const innerIterator = target[method](...args);\r\n    const wrap = isShallow ? toShallow : isReadonly ? toReadonly : toReactive;\r\n    !isReadonly && track(rawTarget, \"iterate\", isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY);\r\n    return {\r\n      // iterator protocol\r\n      next() {\r\n        const { value, done } = innerIterator.next();\r\n        return done ? { value, done } : {\r\n          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),\r\n          done\r\n        };\r\n      },\r\n      // iterable protocol\r\n      [Symbol.iterator]() {\r\n        return this;\r\n      }\r\n    };\r\n  };\r\n}\r\nfunction createReadonlyMethod(type) {\r\n  return function(...args) {\r\n    if (true) {\r\n      const key = args[0] ? `on key \"${args[0]}\" ` : ``;\r\n      console.warn(`${capitalize(type)} operation ${key}failed: target is readonly.`, toRaw(this));\r\n    }\r\n    return type === \"delete\" ? false : this;\r\n  };\r\n}\r\nvar mutableInstrumentations = {\r\n  get(key) {\r\n    return get$1(this, key);\r\n  },\r\n  get size() {\r\n    return size(this);\r\n  },\r\n  has: has$1,\r\n  add,\r\n  set: set$1,\r\n  delete: deleteEntry,\r\n  clear,\r\n  forEach: createForEach(false, false)\r\n};\r\nvar shallowInstrumentations = {\r\n  get(key) {\r\n    return get$1(this, key, false, true);\r\n  },\r\n  get size() {\r\n    return size(this);\r\n  },\r\n  has: has$1,\r\n  add,\r\n  set: set$1,\r\n  delete: deleteEntry,\r\n  clear,\r\n  forEach: createForEach(false, true)\r\n};\r\nvar readonlyInstrumentations = {\r\n  get(key) {\r\n    return get$1(this, key, true);\r\n  },\r\n  get size() {\r\n    return size(this, true);\r\n  },\r\n  has(key) {\r\n    return has$1.call(this, key, true);\r\n  },\r\n  add: createReadonlyMethod(\r\n    \"add\"\r\n    /* ADD */\r\n  ),\r\n  set: createReadonlyMethod(\r\n    \"set\"\r\n    /* SET */\r\n  ),\r\n  delete: createReadonlyMethod(\r\n    \"delete\"\r\n    /* DELETE */\r\n  ),\r\n  clear: createReadonlyMethod(\r\n    \"clear\"\r\n    /* CLEAR */\r\n  ),\r\n  forEach: createForEach(true, false)\r\n};\r\nvar shallowReadonlyInstrumentations = {\r\n  get(key) {\r\n    return get$1(this, key, true, true);\r\n  },\r\n  get size() {\r\n    return size(this, true);\r\n  },\r\n  has(key) {\r\n    return has$1.call(this, key, true);\r\n  },\r\n  add: createReadonlyMethod(\r\n    \"add\"\r\n    /* ADD */\r\n  ),\r\n  set: createReadonlyMethod(\r\n    \"set\"\r\n    /* SET */\r\n  ),\r\n  delete: createReadonlyMethod(\r\n    \"delete\"\r\n    /* DELETE */\r\n  ),\r\n  clear: createReadonlyMethod(\r\n    \"clear\"\r\n    /* CLEAR */\r\n  ),\r\n  forEach: createForEach(true, true)\r\n};\r\nvar iteratorMethods = [\"keys\", \"values\", \"entries\", Symbol.iterator];\r\niteratorMethods.forEach((method) => {\r\n  mutableInstrumentations[method] = createIterableMethod(method, false, false);\r\n  readonlyInstrumentations[method] = createIterableMethod(method, true, false);\r\n  shallowInstrumentations[method] = createIterableMethod(method, false, true);\r\n  shallowReadonlyInstrumentations[method] = createIterableMethod(method, true, true);\r\n});\r\nfunction createInstrumentationGetter(isReadonly, shallow) {\r\n  const instrumentations = shallow ? isReadonly ? shallowReadonlyInstrumentations : shallowInstrumentations : isReadonly ? readonlyInstrumentations : mutableInstrumentations;\r\n  return (target, key, receiver) => {\r\n    if (key === \"__v_isReactive\") {\r\n      return !isReadonly;\r\n    } else if (key === \"__v_isReadonly\") {\r\n      return isReadonly;\r\n    } else if (key === \"__v_raw\") {\r\n      return target;\r\n    }\r\n    return Reflect.get(hasOwn(instrumentations, key) && key in target ? instrumentations : target, key, receiver);\r\n  };\r\n}\r\nvar mutableCollectionHandlers = {\r\n  get: createInstrumentationGetter(false, false)\r\n};\r\nvar shallowCollectionHandlers = {\r\n  get: createInstrumentationGetter(false, true)\r\n};\r\nvar readonlyCollectionHandlers = {\r\n  get: createInstrumentationGetter(true, false)\r\n};\r\nvar shallowReadonlyCollectionHandlers = {\r\n  get: createInstrumentationGetter(true, true)\r\n};\r\nfunction checkIdentityKeys(target, has2, key) {\r\n  const rawKey = toRaw(key);\r\n  if (rawKey !== key && has2.call(target, rawKey)) {\r\n    const type = toRawType(target);\r\n    console.warn(`Reactive ${type} contains both the raw and reactive versions of the same object${type === `Map` ? ` as keys` : ``}, which can lead to inconsistencies. Avoid differentiating between the raw and reactive versions of an object and only use the reactive version if possible.`);\r\n  }\r\n}\r\nvar reactiveMap = /* @__PURE__ */ new WeakMap();\r\nvar shallowReactiveMap = /* @__PURE__ */ new WeakMap();\r\nvar readonlyMap = /* @__PURE__ */ new WeakMap();\r\nvar shallowReadonlyMap = /* @__PURE__ */ new WeakMap();\r\nfunction targetTypeMap(rawType) {\r\n  switch (rawType) {\r\n    case \"Object\":\r\n    case \"Array\":\r\n      return 1;\r\n    case \"Map\":\r\n    case \"Set\":\r\n    case \"WeakMap\":\r\n    case \"WeakSet\":\r\n      return 2;\r\n    default:\r\n      return 0;\r\n  }\r\n}\r\nfunction getTargetType(value) {\r\n  return value[\r\n    \"__v_skip\"\r\n    /* SKIP */\r\n  ] || !Object.isExtensible(value) ? 0 : targetTypeMap(toRawType(value));\r\n}\r\nfunction reactive2(target) {\r\n  if (target && target[\r\n    \"__v_isReadonly\"\r\n    /* IS_READONLY */\r\n  ]) {\r\n    return target;\r\n  }\r\n  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers, reactiveMap);\r\n}\r\nfunction readonly(target) {\r\n  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers, readonlyMap);\r\n}\r\nfunction createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers, proxyMap) {\r\n  if (!isObject(target)) {\r\n    if (true) {\r\n      console.warn(`value cannot be made reactive: ${String(target)}`);\r\n    }\r\n    return target;\r\n  }\r\n  if (target[\r\n    \"__v_raw\"\r\n    /* RAW */\r\n  ] && !(isReadonly && target[\r\n    \"__v_isReactive\"\r\n    /* IS_REACTIVE */\r\n  ])) {\r\n    return target;\r\n  }\r\n  const existingProxy = proxyMap.get(target);\r\n  if (existingProxy) {\r\n    return existingProxy;\r\n  }\r\n  const targetType = getTargetType(target);\r\n  if (targetType === 0) {\r\n    return target;\r\n  }\r\n  const proxy = new Proxy(target, targetType === 2 ? collectionHandlers : baseHandlers);\r\n  proxyMap.set(target, proxy);\r\n  return proxy;\r\n}\r\nfunction toRaw(observed) {\r\n  return observed && toRaw(observed[\r\n    \"__v_raw\"\r\n    /* RAW */\r\n  ]) || observed;\r\n}\r\nfunction isRef(r) {\r\n  return Boolean(r && r.__v_isRef === true);\r\n}\r\n\r\n// packages/alpinejs/src/magics/$nextTick.js\r\nmagic(\"nextTick\", () => nextTick);\r\n\r\n// packages/alpinejs/src/magics/$dispatch.js\r\nmagic(\"dispatch\", (el) => dispatch.bind(dispatch, el));\r\n\r\n// packages/alpinejs/src/magics/$watch.js\r\nmagic(\"watch\", (el, { evaluateLater: evaluateLater2, effect: effect3 }) => (key, callback) => {\r\n  let evaluate2 = evaluateLater2(key);\r\n  let firstTime = true;\r\n  let oldValue;\r\n  let effectReference = effect3(() => evaluate2((value) => {\r\n    JSON.stringify(value);\r\n    if (!firstTime) {\r\n      queueMicrotask(() => {\r\n        callback(value, oldValue);\r\n        oldValue = value;\r\n      });\r\n    } else {\r\n      oldValue = value;\r\n    }\r\n    firstTime = false;\r\n  }));\r\n  el._x_effects.delete(effectReference);\r\n});\r\n\r\n// packages/alpinejs/src/magics/$store.js\r\nmagic(\"store\", getStores);\r\n\r\n// packages/alpinejs/src/magics/$data.js\r\nmagic(\"data\", (el) => scope(el));\r\n\r\n// packages/alpinejs/src/magics/$root.js\r\nmagic(\"root\", (el) => closestRoot(el));\r\n\r\n// packages/alpinejs/src/magics/$refs.js\r\nmagic(\"refs\", (el) => {\r\n  if (el._x_refs_proxy)\r\n    return el._x_refs_proxy;\r\n  el._x_refs_proxy = mergeProxies(getArrayOfRefObject(el));\r\n  return el._x_refs_proxy;\r\n});\r\nfunction getArrayOfRefObject(el) {\r\n  let refObjects = [];\r\n  let currentEl = el;\r\n  while (currentEl) {\r\n    if (currentEl._x_refs)\r\n      refObjects.push(currentEl._x_refs);\r\n    currentEl = currentEl.parentNode;\r\n  }\r\n  return refObjects;\r\n}\r\n\r\n// packages/alpinejs/src/ids.js\r\nvar globalIdMemo = {};\r\nfunction findAndIncrementId(name) {\r\n  if (!globalIdMemo[name])\r\n    globalIdMemo[name] = 0;\r\n  return ++globalIdMemo[name];\r\n}\r\nfunction closestIdRoot(el, name) {\r\n  return findClosest(el, (element) => {\r\n    if (element._x_ids && element._x_ids[name])\r\n      return true;\r\n  });\r\n}\r\nfunction setIdRoot(el, name) {\r\n  if (!el._x_ids)\r\n    el._x_ids = {};\r\n  if (!el._x_ids[name])\r\n    el._x_ids[name] = findAndIncrementId(name);\r\n}\r\n\r\n// packages/alpinejs/src/magics/$id.js\r\nmagic(\"id\", (el) => (name, key = null) => {\r\n  let root = closestIdRoot(el, name);\r\n  let id = root ? root._x_ids[name] : findAndIncrementId(name);\r\n  return key ? `${name}-${id}-${key}` : `${name}-${id}`;\r\n});\r\n\r\n// packages/alpinejs/src/magics/$el.js\r\nmagic(\"el\", (el) => el);\r\n\r\n// packages/alpinejs/src/magics/index.js\r\nwarnMissingPluginMagic(\"Focus\", \"focus\", \"focus\");\r\nwarnMissingPluginMagic(\"Persist\", \"persist\", \"persist\");\r\nfunction warnMissingPluginMagic(name, magicName, slug) {\r\n  magic(magicName, (el) => warn(`You can't use [$${directiveName}] without first installing the \"${name}\" plugin here: https://alpinejs.dev/plugins/${slug}`, el));\r\n}\r\n\r\n// packages/alpinejs/src/entangle.js\r\nfunction entangle({ get: outerGet, set: outerSet }, { get: innerGet, set: innerSet }) {\r\n  let firstRun = true;\r\n  let outerHash, innerHash, outerHashLatest, innerHashLatest;\r\n  let reference = effect(() => {\r\n    let outer, inner;\r\n    if (firstRun) {\r\n      outer = outerGet();\r\n      innerSet(outer);\r\n      inner = innerGet();\r\n      firstRun = false;\r\n    } else {\r\n      outer = outerGet();\r\n      inner = innerGet();\r\n      outerHashLatest = JSON.stringify(outer);\r\n      innerHashLatest = JSON.stringify(inner);\r\n      if (outerHashLatest !== outerHash) {\r\n        inner = innerGet();\r\n        innerSet(outer);\r\n        inner = outer;\r\n      } else {\r\n        outerSet(inner);\r\n        outer = inner;\r\n      }\r\n    }\r\n    outerHash = JSON.stringify(outer);\r\n    innerHash = JSON.stringify(inner);\r\n  });\r\n  return () => {\r\n    release(reference);\r\n  };\r\n}\r\n\r\n// packages/alpinejs/src/directives/x-modelable.js\r\ndirective(\"modelable\", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2, cleanup: cleanup2 }) => {\r\n  let func = evaluateLater2(expression);\r\n  let innerGet = () => {\r\n    let result;\r\n    func((i) => result = i);\r\n    return result;\r\n  };\r\n  let evaluateInnerSet = evaluateLater2(`${expression} = __placeholder`);\r\n  let innerSet = (val) => evaluateInnerSet(() => {\r\n  }, { scope: { \"__placeholder\": val } });\r\n  let initialValue = innerGet();\r\n  innerSet(initialValue);\r\n  queueMicrotask(() => {\r\n    if (!el._x_model)\r\n      return;\r\n    el._x_removeModelListeners[\"default\"]();\r\n    let outerGet = el._x_model.get;\r\n    let outerSet = el._x_model.set;\r\n    let releaseEntanglement = entangle(\r\n      {\r\n        get() {\r\n          return outerGet();\r\n        },\r\n        set(value) {\r\n          outerSet(value);\r\n        }\r\n      },\r\n      {\r\n        get() {\r\n          return innerGet();\r\n        },\r\n        set(value) {\r\n          innerSet(value);\r\n        }\r\n      }\r\n    );\r\n    cleanup2(releaseEntanglement);\r\n  });\r\n});\r\n\r\n// packages/alpinejs/src/directives/x-teleport.js\r\nvar teleportContainerDuringClone = document.createElement(\"div\");\r\ndirective(\"teleport\", (el, { modifiers, expression }, { cleanup: cleanup2 }) => {\r\n  if (el.tagName.toLowerCase() !== \"template\")\r\n    warn(\"x-teleport can only be used on a <template> tag\", el);\r\n  let target = skipDuringClone(() => {\r\n    return document.querySelector(expression);\r\n  }, () => {\r\n    return teleportContainerDuringClone;\r\n  })();\r\n  if (!target)\r\n    warn(`Cannot find x-teleport element for selector: \"${expression}\"`);\r\n  let clone2 = el.content.cloneNode(true).firstElementChild;\r\n  el._x_teleport = clone2;\r\n  clone2._x_teleportBack = el;\r\n  if (el._x_forwardEvents) {\r\n    el._x_forwardEvents.forEach((eventName) => {\r\n      clone2.addEventListener(eventName, (e) => {\r\n        e.stopPropagation();\r\n        el.dispatchEvent(new e.constructor(e.type, e));\r\n      });\r\n    });\r\n  }\r\n  addScopeToNode(clone2, {}, el);\r\n  mutateDom(() => {\r\n    if (modifiers.includes(\"prepend\")) {\r\n      target.parentNode.insertBefore(clone2, target);\r\n    } else if (modifiers.includes(\"append\")) {\r\n      target.parentNode.insertBefore(clone2, target.nextSibling);\r\n    } else {\r\n      target.appendChild(clone2);\r\n    }\r\n    initTree(clone2);\r\n    clone2._x_ignore = true;\r\n  });\r\n  cleanup2(() => clone2.remove());\r\n});\r\n\r\n// packages/alpinejs/src/directives/x-ignore.js\r\nvar handler = () => {\r\n};\r\nhandler.inline = (el, { modifiers }, { cleanup: cleanup2 }) => {\r\n  modifiers.includes(\"self\") ? el._x_ignoreSelf = true : el._x_ignore = true;\r\n  cleanup2(() => {\r\n    modifiers.includes(\"self\") ? delete el._x_ignoreSelf : delete el._x_ignore;\r\n  });\r\n};\r\ndirective(\"ignore\", handler);\r\n\r\n// packages/alpinejs/src/directives/x-effect.js\r\ndirective(\"effect\", (el, { expression }, { effect: effect3 }) => effect3(evaluateLater(el, expression)));\r\n\r\n// packages/alpinejs/src/utils/on.js\r\nfunction on(el, event, modifiers, callback) {\r\n  let listenerTarget = el;\r\n  let handler3 = (e) => callback(e);\r\n  let options = {};\r\n  let wrapHandler = (callback2, wrapper) => (e) => wrapper(callback2, e);\r\n  if (modifiers.includes(\"dot\"))\r\n    event = dotSyntax(event);\r\n  if (modifiers.includes(\"camel\"))\r\n    event = camelCase2(event);\r\n  if (modifiers.includes(\"passive\"))\r\n    options.passive = true;\r\n  if (modifiers.includes(\"capture\"))\r\n    options.capture = true;\r\n  if (modifiers.includes(\"window\"))\r\n    listenerTarget = window;\r\n  if (modifiers.includes(\"document\"))\r\n    listenerTarget = document;\r\n  if (modifiers.includes(\"prevent\"))\r\n    handler3 = wrapHandler(handler3, (next, e) => {\r\n      e.preventDefault();\r\n      next(e);\r\n    });\r\n  if (modifiers.includes(\"stop\"))\r\n    handler3 = wrapHandler(handler3, (next, e) => {\r\n      e.stopPropagation();\r\n      next(e);\r\n    });\r\n  if (modifiers.includes(\"self\"))\r\n    handler3 = wrapHandler(handler3, (next, e) => {\r\n      e.target === el && next(e);\r\n    });\r\n  if (modifiers.includes(\"away\") || modifiers.includes(\"outside\")) {\r\n    listenerTarget = document;\r\n    handler3 = wrapHandler(handler3, (next, e) => {\r\n      if (el.contains(e.target))\r\n        return;\r\n      if (e.target.isConnected === false)\r\n        return;\r\n      if (el.offsetWidth < 1 && el.offsetHeight < 1)\r\n        return;\r\n      if (el._x_isShown === false)\r\n        return;\r\n      next(e);\r\n    });\r\n  }\r\n  if (modifiers.includes(\"once\")) {\r\n    handler3 = wrapHandler(handler3, (next, e) => {\r\n      next(e);\r\n      listenerTarget.removeEventListener(event, handler3, options);\r\n    });\r\n  }\r\n  handler3 = wrapHandler(handler3, (next, e) => {\r\n    if (isKeyEvent(event)) {\r\n      if (isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers)) {\r\n        return;\r\n      }\r\n    }\r\n    next(e);\r\n  });\r\n  if (modifiers.includes(\"debounce\")) {\r\n    let nextModifier = modifiers[modifiers.indexOf(\"debounce\") + 1] || \"invalid-wait\";\r\n    let wait = isNumeric(nextModifier.split(\"ms\")[0]) ? Number(nextModifier.split(\"ms\")[0]) : 250;\r\n    handler3 = debounce(handler3, wait);\r\n  }\r\n  if (modifiers.includes(\"throttle\")) {\r\n    let nextModifier = modifiers[modifiers.indexOf(\"throttle\") + 1] || \"invalid-wait\";\r\n    let wait = isNumeric(nextModifier.split(\"ms\")[0]) ? Number(nextModifier.split(\"ms\")[0]) : 250;\r\n    handler3 = throttle(handler3, wait);\r\n  }\r\n  listenerTarget.addEventListener(event, handler3, options);\r\n  return () => {\r\n    listenerTarget.removeEventListener(event, handler3, options);\r\n  };\r\n}\r\nfunction dotSyntax(subject) {\r\n  return subject.replace(/-/g, \".\");\r\n}\r\nfunction camelCase2(subject) {\r\n  return subject.toLowerCase().replace(/-(\\w)/g, (match, char) => char.toUpperCase());\r\n}\r\nfunction isNumeric(subject) {\r\n  return !Array.isArray(subject) && !isNaN(subject);\r\n}\r\nfunction kebabCase2(subject) {\r\n  if ([\" \", \"_\"].includes(\r\n    subject\r\n  ))\r\n    return subject;\r\n  return subject.replace(/([a-z])([A-Z])/g, \"$1-$2\").replace(/[_\\s]/, \"-\").toLowerCase();\r\n}\r\nfunction isKeyEvent(event) {\r\n  return [\"keydown\", \"keyup\"].includes(event);\r\n}\r\nfunction isListeningForASpecificKeyThatHasntBeenPressed(e, modifiers) {\r\n  let keyModifiers = modifiers.filter((i) => {\r\n    return ![\"window\", \"document\", \"prevent\", \"stop\", \"once\", \"capture\"].includes(i);\r\n  });\r\n  if (keyModifiers.includes(\"debounce\")) {\r\n    let debounceIndex = keyModifiers.indexOf(\"debounce\");\r\n    keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || \"invalid-wait\").split(\"ms\")[0]) ? 2 : 1);\r\n  }\r\n  if (keyModifiers.includes(\"throttle\")) {\r\n    let debounceIndex = keyModifiers.indexOf(\"throttle\");\r\n    keyModifiers.splice(debounceIndex, isNumeric((keyModifiers[debounceIndex + 1] || \"invalid-wait\").split(\"ms\")[0]) ? 2 : 1);\r\n  }\r\n  if (keyModifiers.length === 0)\r\n    return false;\r\n  if (keyModifiers.length === 1 && keyToModifiers(e.key).includes(keyModifiers[0]))\r\n    return false;\r\n  const systemKeyModifiers = [\"ctrl\", \"shift\", \"alt\", \"meta\", \"cmd\", \"super\"];\r\n  const selectedSystemKeyModifiers = systemKeyModifiers.filter((modifier) => keyModifiers.includes(modifier));\r\n  keyModifiers = keyModifiers.filter((i) => !selectedSystemKeyModifiers.includes(i));\r\n  if (selectedSystemKeyModifiers.length > 0) {\r\n    const activelyPressedKeyModifiers = selectedSystemKeyModifiers.filter((modifier) => {\r\n      if (modifier === \"cmd\" || modifier === \"super\")\r\n        modifier = \"meta\";\r\n      return e[`${modifier}Key`];\r\n    });\r\n    if (activelyPressedKeyModifiers.length === selectedSystemKeyModifiers.length) {\r\n      if (keyToModifiers(e.key).includes(keyModifiers[0]))\r\n        return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\nfunction keyToModifiers(key) {\r\n  if (!key)\r\n    return [];\r\n  key = kebabCase2(key);\r\n  let modifierToKeyMap = {\r\n    \"ctrl\": \"control\",\r\n    \"slash\": \"/\",\r\n    \"space\": \" \",\r\n    \"spacebar\": \" \",\r\n    \"cmd\": \"meta\",\r\n    \"esc\": \"escape\",\r\n    \"up\": \"arrow-up\",\r\n    \"down\": \"arrow-down\",\r\n    \"left\": \"arrow-left\",\r\n    \"right\": \"arrow-right\",\r\n    \"period\": \".\",\r\n    \"equal\": \"=\",\r\n    \"minus\": \"-\",\r\n    \"underscore\": \"_\"\r\n  };\r\n  modifierToKeyMap[key] = key;\r\n  return Object.keys(modifierToKeyMap).map((modifier) => {\r\n    if (modifierToKeyMap[modifier] === key)\r\n      return modifier;\r\n  }).filter((modifier) => modifier);\r\n}\r\n\r\n// packages/alpinejs/src/directives/x-model.js\r\ndirective(\"model\", (el, { modifiers, expression }, { effect: effect3, cleanup: cleanup2 }) => {\r\n  let scopeTarget = el;\r\n  if (modifiers.includes(\"parent\")) {\r\n    scopeTarget = el.parentNode;\r\n  }\r\n  let evaluateGet = evaluateLater(scopeTarget, expression);\r\n  let evaluateSet;\r\n  if (typeof expression === \"string\") {\r\n    evaluateSet = evaluateLater(scopeTarget, `${expression} = __placeholder`);\r\n  } else if (typeof expression === \"function\" && typeof expression() === \"string\") {\r\n    evaluateSet = evaluateLater(scopeTarget, `${expression()} = __placeholder`);\r\n  } else {\r\n    evaluateSet = () => {\r\n    };\r\n  }\r\n  let getValue = () => {\r\n    let result;\r\n    evaluateGet((value) => result = value);\r\n    return isGetterSetter(result) ? result.get() : result;\r\n  };\r\n  let setValue = (value) => {\r\n    let result;\r\n    evaluateGet((value2) => result = value2);\r\n    if (isGetterSetter(result)) {\r\n      result.set(value);\r\n    } else {\r\n      evaluateSet(() => {\r\n      }, {\r\n        scope: { \"__placeholder\": value }\r\n      });\r\n    }\r\n  };\r\n  if (modifiers.includes(\"fill\") && el.hasAttribute(\"value\") && (getValue() === null || getValue() === \"\")) {\r\n    setValue(el.value);\r\n  }\r\n  if (typeof expression === \"string\" && el.type === \"radio\") {\r\n    mutateDom(() => {\r\n      if (!el.hasAttribute(\"name\"))\r\n        el.setAttribute(\"name\", expression);\r\n    });\r\n  }\r\n  var event = el.tagName.toLowerCase() === \"select\" || [\"checkbox\", \"radio\"].includes(el.type) || modifiers.includes(\"lazy\") ? \"change\" : \"input\";\r\n  let removeListener = isCloning ? () => {\r\n  } : on(el, event, modifiers, (e) => {\r\n    setValue(getInputValue(el, modifiers, e, getValue()));\r\n  });\r\n  if (!el._x_removeModelListeners)\r\n    el._x_removeModelListeners = {};\r\n  el._x_removeModelListeners[\"default\"] = removeListener;\r\n  cleanup2(() => el._x_removeModelListeners[\"default\"]());\r\n  if (el.form) {\r\n    let removeResetListener = on(el.form, \"reset\", [], (e) => {\r\n      nextTick(() => el._x_model && el._x_model.set(el.value));\r\n    });\r\n    cleanup2(() => removeResetListener());\r\n  }\r\n  el._x_model = {\r\n    get() {\r\n      return getValue();\r\n    },\r\n    set(value) {\r\n      setValue(value);\r\n    }\r\n  };\r\n  el._x_forceModelUpdate = (value) => {\r\n    value = value === void 0 ? getValue() : value;\r\n    if (value === void 0 && typeof expression === \"string\" && expression.match(/\\./))\r\n      value = \"\";\r\n    window.fromModel = true;\r\n    mutateDom(() => bind(el, \"value\", value));\r\n    delete window.fromModel;\r\n  };\r\n  effect3(() => {\r\n    let value = getValue();\r\n    if (modifiers.includes(\"unintrusive\") && document.activeElement.isSameNode(el))\r\n      return;\r\n    el._x_forceModelUpdate(value);\r\n  });\r\n});\r\nfunction getInputValue(el, modifiers, event, currentValue) {\r\n  return mutateDom(() => {\r\n    if (event instanceof CustomEvent && event.detail !== void 0) {\r\n      return typeof event.detail != \"undefined\" ? event.detail : event.target.value;\r\n    } else if (el.type === \"checkbox\") {\r\n      if (Array.isArray(currentValue)) {\r\n        let newValue = modifiers.includes(\"number\") ? safeParseNumber(event.target.value) : event.target.value;\r\n        return event.target.checked ? currentValue.concat([newValue]) : currentValue.filter((el2) => !checkedAttrLooseCompare2(el2, newValue));\r\n      } else {\r\n        return event.target.checked;\r\n      }\r\n    } else if (el.tagName.toLowerCase() === \"select\" && el.multiple) {\r\n      return modifiers.includes(\"number\") ? Array.from(event.target.selectedOptions).map((option) => {\r\n        let rawValue = option.value || option.text;\r\n        return safeParseNumber(rawValue);\r\n      }) : Array.from(event.target.selectedOptions).map((option) => {\r\n        return option.value || option.text;\r\n      });\r\n    } else {\r\n      let rawValue = event.target.value;\r\n      return modifiers.includes(\"number\") ? safeParseNumber(rawValue) : modifiers.includes(\"trim\") ? rawValue.trim() : rawValue;\r\n    }\r\n  });\r\n}\r\nfunction safeParseNumber(rawValue) {\r\n  let number = rawValue ? parseFloat(rawValue) : null;\r\n  return isNumeric2(number) ? number : rawValue;\r\n}\r\nfunction checkedAttrLooseCompare2(valueA, valueB) {\r\n  return valueA == valueB;\r\n}\r\nfunction isNumeric2(subject) {\r\n  return !Array.isArray(subject) && !isNaN(subject);\r\n}\r\nfunction isGetterSetter(value) {\r\n  return value !== null && typeof value === \"object\" && typeof value.get === \"function\" && typeof value.set === \"function\";\r\n}\r\n\r\n// packages/alpinejs/src/directives/x-cloak.js\r\ndirective(\"cloak\", (el) => queueMicrotask(() => mutateDom(() => el.removeAttribute(prefix(\"cloak\")))));\r\n\r\n// packages/alpinejs/src/directives/x-init.js\r\naddInitSelector(() => `[${prefix(\"init\")}]`);\r\ndirective(\"init\", skipDuringClone((el, { expression }, { evaluate: evaluate2 }) => {\r\n  if (typeof expression === \"string\") {\r\n    return !!expression.trim() && evaluate2(expression, {}, false);\r\n  }\r\n  return evaluate2(expression, {}, false);\r\n}));\r\n\r\n// packages/alpinejs/src/directives/x-text.js\r\ndirective(\"text\", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2 }) => {\r\n  let evaluate2 = evaluateLater2(expression);\r\n  effect3(() => {\r\n    evaluate2((value) => {\r\n      mutateDom(() => {\r\n        el.textContent = value;\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n// packages/alpinejs/src/directives/x-html.js\r\ndirective(\"html\", (el, { expression }, { effect: effect3, evaluateLater: evaluateLater2 }) => {\r\n  let evaluate2 = evaluateLater2(expression);\r\n  effect3(() => {\r\n    evaluate2((value) => {\r\n      mutateDom(() => {\r\n        el.innerHTML = value;\r\n        el._x_ignoreSelf = true;\r\n        initTree(el);\r\n        delete el._x_ignoreSelf;\r\n      });\r\n    });\r\n  });\r\n});\r\n\r\n// packages/alpinejs/src/directives/x-bind.js\r\nmapAttributes(startingWith(\":\", into(prefix(\"bind:\"))));\r\ndirective(\"bind\", (el, { value, modifiers, expression, original }, { effect: effect3 }) => {\r\n  if (!value) {\r\n    let bindingProviders = {};\r\n    injectBindingProviders(bindingProviders);\r\n    let getBindings = evaluateLater(el, expression);\r\n    getBindings((bindings) => {\r\n      applyBindingsObject(el, bindings, original);\r\n    }, { scope: bindingProviders });\r\n    return;\r\n  }\r\n  if (value === \"key\")\r\n    return storeKeyForXFor(el, expression);\r\n  let evaluate2 = evaluateLater(el, expression);\r\n  effect3(() => evaluate2((result) => {\r\n    if (result === void 0 && typeof expression === \"string\" && expression.match(/\\./)) {\r\n      result = \"\";\r\n    }\r\n    mutateDom(() => bind(el, value, result, modifiers));\r\n  }));\r\n});\r\nfunction storeKeyForXFor(el, expression) {\r\n  el._x_keyExpression = expression;\r\n}\r\n\r\n// packages/alpinejs/src/directives/x-data.js\r\naddRootSelector(() => `[${prefix(\"data\")}]`);\r\ndirective(\"data\", skipDuringClone((el, { expression }, { cleanup: cleanup2 }) => {\r\n  expression = expression === \"\" ? \"{}\" : expression;\r\n  let magicContext = {};\r\n  injectMagics(magicContext, el);\r\n  let dataProviderContext = {};\r\n  injectDataProviders(dataProviderContext, magicContext);\r\n  let data2 = evaluate(el, expression, { scope: dataProviderContext });\r\n  if (data2 === void 0 || data2 === true)\r\n    data2 = {};\r\n  injectMagics(data2, el);\r\n  let reactiveData = reactive(data2);\r\n  initInterceptors(reactiveData);\r\n  let undo = addScopeToNode(el, reactiveData);\r\n  reactiveData[\"init\"] && evaluate(el, reactiveData[\"init\"]);\r\n  cleanup2(() => {\r\n    reactiveData[\"destroy\"] && evaluate(el, reactiveData[\"destroy\"]);\r\n    undo();\r\n  });\r\n}));\r\n\r\n// packages/alpinejs/src/directives/x-show.js\r\ndirective(\"show\", (el, { modifiers, expression }, { effect: effect3 }) => {\r\n  let evaluate2 = evaluateLater(el, expression);\r\n  if (!el._x_doHide)\r\n    el._x_doHide = () => {\r\n      mutateDom(() => {\r\n        el.style.setProperty(\"display\", \"none\", modifiers.includes(\"important\") ? \"important\" : void 0);\r\n      });\r\n    };\r\n  if (!el._x_doShow)\r\n    el._x_doShow = () => {\r\n      mutateDom(() => {\r\n        if (el.style.length === 1 && el.style.display === \"none\") {\r\n          el.removeAttribute(\"style\");\r\n        } else {\r\n          el.style.removeProperty(\"display\");\r\n        }\r\n      });\r\n    };\r\n  let hide = () => {\r\n    el._x_doHide();\r\n    el._x_isShown = false;\r\n  };\r\n  let show = () => {\r\n    el._x_doShow();\r\n    el._x_isShown = true;\r\n  };\r\n  let clickAwayCompatibleShow = () => setTimeout(show);\r\n  let toggle = once(\r\n    (value) => value ? show() : hide(),\r\n    (value) => {\r\n      if (typeof el._x_toggleAndCascadeWithTransitions === \"function\") {\r\n        el._x_toggleAndCascadeWithTransitions(el, value, show, hide);\r\n      } else {\r\n        value ? clickAwayCompatibleShow() : hide();\r\n      }\r\n    }\r\n  );\r\n  let oldValue;\r\n  let firstTime = true;\r\n  effect3(() => evaluate2((value) => {\r\n    if (!firstTime && value === oldValue)\r\n      return;\r\n    if (modifiers.includes(\"immediate\"))\r\n      value ? clickAwayCompatibleShow() : hide();\r\n    toggle(value);\r\n    oldValue = value;\r\n    firstTime = false;\r\n  }));\r\n});\r\n\r\n// packages/alpinejs/src/directives/x-for.js\r\ndirective(\"for\", (el, { expression }, { effect: effect3, cleanup: cleanup2 }) => {\r\n  let iteratorNames = parseForExpression(expression);\r\n  let evaluateItems = evaluateLater(el, iteratorNames.items);\r\n  let evaluateKey = evaluateLater(\r\n    el,\r\n    // the x-bind:key expression is stored for our use instead of evaluated.\r\n    el._x_keyExpression || \"index\"\r\n  );\r\n  el._x_prevKeys = [];\r\n  el._x_lookup = {};\r\n  effect3(() => loop(el, iteratorNames, evaluateItems, evaluateKey));\r\n  cleanup2(() => {\r\n    Object.values(el._x_lookup).forEach((el2) => el2.remove());\r\n    delete el._x_prevKeys;\r\n    delete el._x_lookup;\r\n  });\r\n});\r\nfunction loop(el, iteratorNames, evaluateItems, evaluateKey) {\r\n  let isObject2 = (i) => typeof i === \"object\" && !Array.isArray(i);\r\n  let templateEl = el;\r\n  evaluateItems((items) => {\r\n    if (isNumeric3(items) && items >= 0) {\r\n      items = Array.from(Array(items).keys(), (i) => i + 1);\r\n    }\r\n    if (items === void 0)\r\n      items = [];\r\n    let lookup = el._x_lookup;\r\n    let prevKeys = el._x_prevKeys;\r\n    let scopes = [];\r\n    let keys = [];\r\n    if (isObject2(items)) {\r\n      items = Object.entries(items).map(([key, value]) => {\r\n        let scope2 = getIterationScopeVariables(iteratorNames, value, key, items);\r\n        evaluateKey((value2) => keys.push(value2), { scope: { index: key, ...scope2 } });\r\n        scopes.push(scope2);\r\n      });\r\n    } else {\r\n      for (let i = 0; i < items.length; i++) {\r\n        let scope2 = getIterationScopeVariables(iteratorNames, items[i], i, items);\r\n        evaluateKey((value) => keys.push(value), { scope: { index: i, ...scope2 } });\r\n        scopes.push(scope2);\r\n      }\r\n    }\r\n    let adds = [];\r\n    let moves = [];\r\n    let removes = [];\r\n    let sames = [];\r\n    for (let i = 0; i < prevKeys.length; i++) {\r\n      let key = prevKeys[i];\r\n      if (keys.indexOf(key) === -1)\r\n        removes.push(key);\r\n    }\r\n    prevKeys = prevKeys.filter((key) => !removes.includes(key));\r\n    let lastKey = \"template\";\r\n    for (let i = 0; i < keys.length; i++) {\r\n      let key = keys[i];\r\n      let prevIndex = prevKeys.indexOf(key);\r\n      if (prevIndex === -1) {\r\n        prevKeys.splice(i, 0, key);\r\n        adds.push([lastKey, i]);\r\n      } else if (prevIndex !== i) {\r\n        let keyInSpot = prevKeys.splice(i, 1)[0];\r\n        let keyForSpot = prevKeys.splice(prevIndex - 1, 1)[0];\r\n        prevKeys.splice(i, 0, keyForSpot);\r\n        prevKeys.splice(prevIndex, 0, keyInSpot);\r\n        moves.push([keyInSpot, keyForSpot]);\r\n      } else {\r\n        sames.push(key);\r\n      }\r\n      lastKey = key;\r\n    }\r\n    for (let i = 0; i < removes.length; i++) {\r\n      let key = removes[i];\r\n      if (!!lookup[key]._x_effects) {\r\n        lookup[key]._x_effects.forEach(dequeueJob);\r\n      }\r\n      lookup[key].remove();\r\n      lookup[key] = null;\r\n      delete lookup[key];\r\n    }\r\n    for (let i = 0; i < moves.length; i++) {\r\n      let [keyInSpot, keyForSpot] = moves[i];\r\n      let elInSpot = lookup[keyInSpot];\r\n      let elForSpot = lookup[keyForSpot];\r\n      let marker = document.createElement(\"div\");\r\n      mutateDom(() => {\r\n        elForSpot.after(marker);\r\n        elInSpot.after(elForSpot);\r\n        elForSpot._x_currentIfEl && elForSpot.after(elForSpot._x_currentIfEl);\r\n        marker.before(elInSpot);\r\n        elInSpot._x_currentIfEl && elInSpot.after(elInSpot._x_currentIfEl);\r\n        marker.remove();\r\n      });\r\n      refreshScope(elForSpot, scopes[keys.indexOf(keyForSpot)]);\r\n    }\r\n    for (let i = 0; i < adds.length; i++) {\r\n      let [lastKey2, index] = adds[i];\r\n      let lastEl = lastKey2 === \"template\" ? templateEl : lookup[lastKey2];\r\n      if (lastEl._x_currentIfEl)\r\n        lastEl = lastEl._x_currentIfEl;\r\n      let scope2 = scopes[index];\r\n      let key = keys[index];\r\n      let clone2 = document.importNode(templateEl.content, true).firstElementChild;\r\n      addScopeToNode(clone2, reactive(scope2), templateEl);\r\n      mutateDom(() => {\r\n        lastEl.after(clone2);\r\n        initTree(clone2);\r\n      });\r\n      if (typeof key === \"object\") {\r\n        warn(\"x-for key cannot be an object, it must be a string or an integer\", templateEl);\r\n      }\r\n      lookup[key] = clone2;\r\n    }\r\n    for (let i = 0; i < sames.length; i++) {\r\n      refreshScope(lookup[sames[i]], scopes[keys.indexOf(sames[i])]);\r\n    }\r\n    templateEl._x_prevKeys = keys;\r\n  });\r\n}\r\nfunction parseForExpression(expression) {\r\n  let forIteratorRE = /,([^,\\}\\]]*)(?:,([^,\\}\\]]*))?$/;\r\n  let stripParensRE = /^\\s*\\(|\\)\\s*$/g;\r\n  let forAliasRE = /([\\s\\S]*?)\\s+(?:in|of)\\s+([\\s\\S]*)/;\r\n  let inMatch = expression.match(forAliasRE);\r\n  if (!inMatch)\r\n    return;\r\n  let res = {};\r\n  res.items = inMatch[2].trim();\r\n  let item = inMatch[1].replace(stripParensRE, \"\").trim();\r\n  let iteratorMatch = item.match(forIteratorRE);\r\n  if (iteratorMatch) {\r\n    res.item = item.replace(forIteratorRE, \"\").trim();\r\n    res.index = iteratorMatch[1].trim();\r\n    if (iteratorMatch[2]) {\r\n      res.collection = iteratorMatch[2].trim();\r\n    }\r\n  } else {\r\n    res.item = item;\r\n  }\r\n  return res;\r\n}\r\nfunction getIterationScopeVariables(iteratorNames, item, index, items) {\r\n  let scopeVariables = {};\r\n  if (/^\\[.*\\]$/.test(iteratorNames.item) && Array.isArray(item)) {\r\n    let names = iteratorNames.item.replace(\"[\", \"\").replace(\"]\", \"\").split(\",\").map((i) => i.trim());\r\n    names.forEach((name, i) => {\r\n      scopeVariables[name] = item[i];\r\n    });\r\n  } else if (/^\\{.*\\}$/.test(iteratorNames.item) && !Array.isArray(item) && typeof item === \"object\") {\r\n    let names = iteratorNames.item.replace(\"{\", \"\").replace(\"}\", \"\").split(\",\").map((i) => i.trim());\r\n    names.forEach((name) => {\r\n      scopeVariables[name] = item[name];\r\n    });\r\n  } else {\r\n    scopeVariables[iteratorNames.item] = item;\r\n  }\r\n  if (iteratorNames.index)\r\n    scopeVariables[iteratorNames.index] = index;\r\n  if (iteratorNames.collection)\r\n    scopeVariables[iteratorNames.collection] = items;\r\n  return scopeVariables;\r\n}\r\nfunction isNumeric3(subject) {\r\n  return !Array.isArray(subject) && !isNaN(subject);\r\n}\r\n\r\n// packages/alpinejs/src/directives/x-ref.js\r\nfunction handler2() {\r\n}\r\nhandler2.inline = (el, { expression }, { cleanup: cleanup2 }) => {\r\n  let root = closestRoot(el);\r\n  if (!root._x_refs)\r\n    root._x_refs = {};\r\n  root._x_refs[expression] = el;\r\n  cleanup2(() => delete root._x_refs[expression]);\r\n};\r\ndirective(\"ref\", handler2);\r\n\r\n// packages/alpinejs/src/directives/x-if.js\r\ndirective(\"if\", (el, { expression }, { effect: effect3, cleanup: cleanup2 }) => {\r\n  let evaluate2 = evaluateLater(el, expression);\r\n  let show = () => {\r\n    if (el._x_currentIfEl)\r\n      return el._x_currentIfEl;\r\n    let clone2 = el.content.cloneNode(true).firstElementChild;\r\n    addScopeToNode(clone2, {}, el);\r\n    mutateDom(() => {\r\n      el.after(clone2);\r\n      initTree(clone2);\r\n    });\r\n    el._x_currentIfEl = clone2;\r\n    el._x_undoIf = () => {\r\n      walk(clone2, (node) => {\r\n        if (!!node._x_effects) {\r\n          node._x_effects.forEach(dequeueJob);\r\n        }\r\n      });\r\n      clone2.remove();\r\n      delete el._x_currentIfEl;\r\n    };\r\n    return clone2;\r\n  };\r\n  let hide = () => {\r\n    if (!el._x_undoIf)\r\n      return;\r\n    el._x_undoIf();\r\n    delete el._x_undoIf;\r\n  };\r\n  effect3(() => evaluate2((value) => {\r\n    value ? show() : hide();\r\n  }));\r\n  cleanup2(() => el._x_undoIf && el._x_undoIf());\r\n});\r\n\r\n// packages/alpinejs/src/directives/x-id.js\r\ndirective(\"id\", (el, { expression }, { evaluate: evaluate2 }) => {\r\n  let names = evaluate2(expression);\r\n  names.forEach((name) => setIdRoot(el, name));\r\n});\r\n\r\n// packages/alpinejs/src/directives/x-on.js\r\nmapAttributes(startingWith(\"@\", into(prefix(\"on:\"))));\r\ndirective(\"on\", skipDuringClone((el, { value, modifiers, expression }, { cleanup: cleanup2 }) => {\r\n  let evaluate2 = expression ? evaluateLater(el, expression) : () => {\r\n  };\r\n  if (el.tagName.toLowerCase() === \"template\") {\r\n    if (!el._x_forwardEvents)\r\n      el._x_forwardEvents = [];\r\n    if (!el._x_forwardEvents.includes(value))\r\n      el._x_forwardEvents.push(value);\r\n  }\r\n  let removeListener = on(el, value, modifiers, (e) => {\r\n    evaluate2(() => {\r\n    }, { scope: { \"$event\": e }, params: [e] });\r\n  });\r\n  cleanup2(() => removeListener());\r\n}));\r\n\r\n// packages/alpinejs/src/directives/index.js\r\nwarnMissingPluginDirective(\"Collapse\", \"collapse\", \"collapse\");\r\nwarnMissingPluginDirective(\"Intersect\", \"intersect\", \"intersect\");\r\nwarnMissingPluginDirective(\"Focus\", \"trap\", \"focus\");\r\nwarnMissingPluginDirective(\"Mask\", \"mask\", \"mask\");\r\nfunction warnMissingPluginDirective(name, directiveName2, slug) {\r\n  directive(directiveName2, (el) => warn(`You can't use [x-${directiveName2}] without first installing the \"${name}\" plugin here: https://alpinejs.dev/plugins/${slug}`, el));\r\n}\r\n\r\n// packages/alpinejs/src/index.js\r\nalpine_default.setEvaluator(normalEvaluator);\r\nalpine_default.setReactivityEngine({ reactive: reactive2, effect: effect2, release: stop, raw: toRaw });\r\nvar src_default = alpine_default;\r\n\r\n// packages/alpinejs/builds/module.js\r\nvar module_default = src_default;\r\n\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/alpinejs/dist/module.esm.js\n");

/***/ }),

/***/ "./resources/js/alpine.js":
/*!********************************!*\
  !*** ./resources/js/alpine.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var alpinejs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! alpinejs */ \"./node_modules/alpinejs/dist/module.esm.js\");\n/* harmony import */ var _alpinejs_mask__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @alpinejs/mask */ \"./node_modules/@alpinejs/mask/dist/module.esm.js\");\n/* harmony import */ var _components_navbar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/navbar */ \"./resources/js/components/navbar.js\");\n/* harmony import */ var _components_sidebar__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/sidebar */ \"./resources/js/components/sidebar.js\");\n\n\nalpinejs__WEBPACK_IMPORTED_MODULE_0__.default.plugin(_alpinejs_mask__WEBPACK_IMPORTED_MODULE_1__.default);\n\n\nalpinejs__WEBPACK_IMPORTED_MODULE_0__.default.data('navbar', _components_navbar__WEBPACK_IMPORTED_MODULE_2__.default);\nalpinejs__WEBPACK_IMPORTED_MODULE_0__.default.data('sidebar', _components_sidebar__WEBPACK_IMPORTED_MODULE_3__.default);\nalpinejs__WEBPACK_IMPORTED_MODULE_0__.default.start();//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvYWxwaW5lLmpzPzQ0YWEiXSwibmFtZXMiOlsiQWxwaW5lIiwibWFzayIsIm5hdmJhciIsInNpZGViYXIiXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFFQTtBQUNBQSxvREFBQSxDQUFjQyxtREFBZDtBQUVBO0FBQ0E7QUFFQUQsa0RBQUEsQ0FBWSxRQUFaLEVBQXNCRSx1REFBdEI7QUFDQUYsa0RBQUEsQ0FBWSxTQUFaLEVBQXVCRyx3REFBdkI7QUFFQUgsbURBQUEiLCJmaWxlIjoiLi9yZXNvdXJjZXMvanMvYWxwaW5lLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEFscGluZSBmcm9tICdhbHBpbmVqcyc7XHJcblxyXG5pbXBvcnQgbWFzayBmcm9tICdAYWxwaW5lanMvbWFzaycgXHJcbkFscGluZS5wbHVnaW4obWFzaylcclxuXHJcbmltcG9ydCBuYXZiYXIgZnJvbSAnLi9jb21wb25lbnRzL25hdmJhcic7XHJcbmltcG9ydCBzaWRlYmFyIGZyb20gJy4vY29tcG9uZW50cy9zaWRlYmFyJztcclxuXHJcbkFscGluZS5kYXRhKCduYXZiYXInLCBuYXZiYXIpO1xyXG5BbHBpbmUuZGF0YSgnc2lkZWJhcicsIHNpZGViYXIpO1xyXG5cclxuQWxwaW5lLnN0YXJ0KCk7XHJcblxyXG5cclxuXHJcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/alpine.js\n");

/***/ }),

/***/ "./resources/js/components/navbar.js":
/*!*******************************************!*\
  !*** ./resources/js/components/navbar.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function () {\n  return {\n    open: false,\n    toggle: function toggle() {\n      this.open = !this.open;\n    }\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9uYXZiYXIuanM/MzI3OSJdLCJuYW1lcyI6WyJvcGVuIiwidG9nZ2xlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWU7QUFBQSxTQUFPO0FBQ2xCQSxRQUFJLEVBQUUsS0FEWTtBQUdsQkMsVUFIa0Isb0JBR1Q7QUFDTCxXQUFLRCxJQUFMLEdBQVksQ0FBRSxLQUFLQSxJQUFuQjtBQUNIO0FBTGlCLEdBQVA7QUFBQSxDQUFmIiwiZmlsZSI6Ii4vcmVzb3VyY2VzL2pzL2NvbXBvbmVudHMvbmF2YmFyLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgKCkgPT4gKHtcclxuICAgIG9wZW46IGZhbHNlLFxyXG5cclxuICAgIHRvZ2dsZSgpIHtcclxuICAgICAgICB0aGlzLm9wZW4gPSAhIHRoaXMub3BlblxyXG4gICAgfVxyXG59KSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./resources/js/components/navbar.js\n");

/***/ }),

/***/ "./resources/js/components/sidebar.js":
/*!********************************************!*\
  !*** ./resources/js/components/sidebar.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (function () {\n  return {\n    open: false,\n    toggle: function toggle() {\n      this.open = !this.open;\n    }\n  };\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9yZXNvdXJjZXMvanMvY29tcG9uZW50cy9zaWRlYmFyLmpzPzY4OGQiXSwibmFtZXMiOlsib3BlbiIsInRvZ2dsZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLGlFQUFlO0FBQUEsU0FBTztBQUNsQkEsUUFBSSxFQUFFLEtBRFk7QUFHbEJDLFVBSGtCLG9CQUdUO0FBQ0wsV0FBS0QsSUFBTCxHQUFZLENBQUUsS0FBS0EsSUFBbkI7QUFDSDtBQUxpQixHQUFQO0FBQUEsQ0FBZiIsImZpbGUiOiIuL3Jlc291cmNlcy9qcy9jb21wb25lbnRzL3NpZGViYXIuanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAoKSA9PiAoe1xyXG4gICAgb3BlbjogZmFsc2UsXHJcblxyXG4gICAgdG9nZ2xlKCkge1xyXG4gICAgICAgIHRoaXMub3BlbiA9ICEgdGhpcy5vcGVuXHJcbiAgICB9XHJcbn0pIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./resources/js/components/sidebar.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./resources/js/alpine.js");
/******/ 	
/******/ })()
;